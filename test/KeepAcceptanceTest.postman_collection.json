{
	"info": {
		"_postman_id": "adb0216d-f70a-453c-ab7b-b1ffc6b4a714",
		"name": "Keep Acceptance Test",
		"description": "Use this collection to run acceptance test on new Keep Builds. It will verify the Keep APIs used by EWS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search Setup",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"    pm.environment.set(\"AUTH_SUBJECT\", jsonData.claims.sub);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create search messageA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestSearchMessageId\", jsonData.unid);",
									"    pm.environment.unset('BASE64_MESSAGE'); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const from = pm.environment.get('AUTH_SUBJECT');",
									"const to = pm.environment.get('AUTH_SUBJECT');",
									"const message = `Subject: Keep Acceptance Test messageA\\r\\n\\Mime-Version: 1.0 (Mac OS X Mail 13.4 \\(3608.120.23.2.4\\))\\r\\nContent-Type: text/html;\\r\\n\tcharset=us-ascii\\r\\nX-Apple-Auto-Saved: 1\\r\\nX-Apple-Base-Url: x-msg://5/\\r\\nX-Apple-Mail-Remote-Attachments: NO\\r\\nFrom: ${from}\\r\\nX-Universally-Unique-Identifier: 528A7BA8-49C3-4935-92F1-D6CF5E749516\\r\\nX-Apple-Windows-Friendly: 1\\r\\nDate: Mon, 29 Mar 2021 17:54:50 -0400\\r\\nX-Apple-Mail-Signature: \\r\\nContent-Transfer-Encoding: 7bit\\r\\nMessage-Id: <1DBB2965-BF87-42C8-BA02-B0117FB744F8@miramare.projectkeep.io>\\r\\nX-Uniform-Type-Identifier: com.apple.mail-draft\\r\\nTo: ${to}\\r\\n\\r\\n\\<html><head></head><body dir=\"auto\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;\">I am regression testing Keep APIs. Random words: Draft lab FindMe246 animal Project.&nbsp;</body></html>\\r\\n`;",
									"const base64String = Buffer.from(message).toString('base64');",
									"pm.environment.set('BASE64_MESSAGE', base64String);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/base64"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{BASE64_MESSAGE}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							]
						},
						"description": "Create a message from mime content. Send is set to true so the message will show up in the sent folder as well as the inbox."
					},
					"response": []
				},
				{
					"name": "Create search messageB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestSearchMessageId2\", jsonData.unid);",
									"    pm.environment.unset('BASE64_MESSAGE');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const from = pm.environment.get('AUTH_SUBJECT');",
									"const to = pm.environment.get('AUTH_SUBJECT');",
									"const message = `Subject: Keep Acceptance Test messageB\\r\\n\\Mime-Version: 1.0 (Mac OS X Mail 13.4 \\(3608.120.23.2.4\\))\\r\\nContent-Type: text/html;\\r\\n\tcharset=us-ascii\\r\\nX-Apple-Auto-Saved: 1\\r\\nX-Apple-Base-Url: x-msg://5/\\r\\nX-Apple-Mail-Remote-Attachments: NO\\r\\nFrom: ${from}\\r\\nX-Universally-Unique-Identifier: 528A7BA8-49C3-4935-92F1-D6CF5E749516\\r\\nX-Apple-Windows-Friendly: 1\\r\\nDate: Mon, 29 Mar 2021 17:54:50 -0400\\r\\nX-Apple-Mail-Signature: \\r\\nContent-Transfer-Encoding: 7bit\\r\\nMessage-Id: <1DBB2965-BF87-42C8-BA02-B0117FB744F8@miramare.projectkeep.io>\\r\\nX-Uniform-Type-Identifier: com.apple.mail-draft\\r\\nTo: ${to}\\r\\n\\r\\n\\<html><head></head><body dir=\"auto\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;\">I am regression testing Keep APIs.&nbsp;</body></html>\\r\\n`;",
									"const base64String = Buffer.from(message).toString('base64');",
									"pm.environment.set('BASE64_MESSAGE', base64String);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/base64"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{BASE64_MESSAGE}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							]
						},
						"description": "Create a message from mime content. Send is set to true so the message will show up in the sent folder as well as the inbox."
					},
					"response": []
				}
			],
			"description": "Create messages that will be used for the Search tests at the end. This is done first to give Domino time to index the new messages."
		},
		{
			"name": "Labels",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve label details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 10",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for roots folders\", function () {",
									"    var expectedViews = [\"($All)\", \"($Calendar)\", \"($Inbox)\", \"($Journal)\", \"($JunkMail)\", \"($SoftDeletions)\", \"($ToDo)\", \"($Drafts)\", \"($Sent)\" ];",
									"    var folders = jsonData.filter(folder => {",
									"        if (folder.View === \"($Drafts)\") {",
									"            pm.environment.set(\"DraftsSystemFolderId\", folder.FolderId);",
									"        }",
									"        return expectedViews.includes(folder.View);",
									"    });",
									"    pm.expect(folders.length).to.equal(expectedViews.length);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-1874) Retrieve label details for birthdays & anniversaries type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 10",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"the label should be Contacts type\", function () {",
									"    jsonData.filter(folder => {",
									"        if (folder.View === \"(Birthdays & Anniversaries)\") {",
									"            pm.expect(folder.Type).to.equal(\"Contacts\");",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "The Type for the \"Birthdays & Anniversaries\" label should be \"Contacts\"."
					},
					"response": []
				},
				{
					"name": "Create Label/folder named TestTA1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA1\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"NewFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"TestTA1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create subfolder TestTA1-sub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"ParentId\": { \"type\":\"string\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"ParentId\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA1-sub\");",
									"    pm.expect(jsonData.ParentId).to.equal(pm.environment.get(\"NewFolderId\"));",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"SubfolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"TestTA1-sub\",\n    \"ParentId\": \"{{NewFolderId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Creates a subfolder in the system Drafts folder."
					},
					"response": []
				},
				{
					"name": "Retrieve label details after subfolder folder creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 11",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check parentFolderId includes in child folder\", function () {",
									"    const subFolderId = pm.environment.get(\"SubfolderId\");",
									"    const parentFolderId = pm.environment.get(\"NewFolderId\");",
									"    const subFolderObject = jsonData.find(folders => folders[\"FolderId\"] === subFolderId);",
									"",
									"    pm.expect(subFolderObject.ParentId).to.equal(parentFolderId)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "/label retrieve label details with folderId of folder TestTA1-sub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"ParentId\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"ParentId\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    const subFolderId = pm.environment.get(\"SubfolderId\");",
									"    const parentsFolderId = pm.environment.get(\"NewFolderId\");",
									"",
									"    pm.expect(jsonData.FolderId).to.equal(subFolderId);",
									"    pm.expect(jsonData.ParentId).to.equal(parentsFolderId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('SubfolderId')).to.equal(true, \"FolderId is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{SubfolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{SubfolderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete subfolder TestTA1-sub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"SubfolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"SubfolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{SubfolderId}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{SubfolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS ( LABS-2438) /label/unid retrieve label details with bad name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/bad_name",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"bad_name"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Label/folder named TestTA2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA2\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"NewFolderId2\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"TestTA2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Label/folder named TestTA3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA3\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"NewFolderId3\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"TestTA3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve label details after folder creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 11",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for roots folders\", function () {",
									"    var expectedViews = [\"($All)\", \"($Calendar)\", \"($Inbox)\", \"($Journal)\", \"($JunkMail)\", \"($SoftDeletions)\", \"($ToDo)\", \"($Drafts)\", \"($Sent)\", \"TestTA1\" ];",
									"    var folders = jsonData.filter(folder => {",
									"        return expectedViews.includes(folder.View);",
									"    });",
									"    pm.expect(folders.length).to.equal(10);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "/label retrieve label details with folderId of folder TestTA1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FolderId).to.equal(pm.environment.get(\"NewFolderId\"), \"FolderId is not correct\");",
									"    pm.expect(jsonData.View).to.equal(\"TestTA1\");",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('NewFolderId')).to.equal(true, \"FolderId is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Label/folder named TestTA2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"// console.log(\"Rename response\");",
									"// console.log(jsonData);",
									"",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"NewFolderId2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labelRenameTo\" : \"TestTA2Renamed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Additional fields with value to the Label/folder named TestTA2Renamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"// console.log(\"Rename response\");",
									"// console.log(jsonData);",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"NewFolderId2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AdditionalFields\" : {\"xHCL-x-acceptance\": \"testing\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/label Retrieve additional fields details - testing of folder TestTA2Renamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FolderId).to.equal(pm.environment.get(\"NewFolderId2\"), \"FolderId is not correct\");",
									"    pm.expect(jsonData.View).to.equal(\"TestTA2Renamed\");",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA2Renamed\");",
									"    pm.expect(jsonData.AdditionalFields[\"xHCL-x-acceptance\"]).to.be.equal(\"testing\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('NewFolderId2')).to.equal(true, \"FolderId is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding additional fields - undefined to Label/folder - TestTA2Renamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"// console.log(\"Rename response\");",
									"// console.log(jsonData);",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.displayName).to.equal(pm.environment.get(\"TestTA2Renamed\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labelRenameTo\" : \"TestTA2Renamed\",\n    \"AdditionalFields\": {\"xHCL-x-acceptance\": null}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/label Retrieve both additional fields details - undefined and folderId - TestTA2Renamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FolderId).to.equal(pm.environment.get(\"NewFolderId2\"), \"FolderId is not correct\");",
									"    pm.expect(jsonData.View).to.equal(\"TestTA2Renamed\");",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"TestTA2Renamed\");",
									"    pm.expect(jsonData.AdditionalFields[\"xHCL-x-acceptance\"]).to.be.undefined;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('NewFolderId2')).to.equal(true, \"FolderId is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Move Label/folder named TestTA2Renamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"// console.log(\"MoveFolder response\");",
									"// console.log(jsonData);",
									"",
									"",
									"pm.test(\"Verify success for moved folder\", function () {",
									"    pm.expect(jsonData.movedFolderIds[\"0\"].status).to.equal(200);",
									"    pm.expect(jsonData.movedFolderIds[\"0\"].message).to.include(\"move folder successful\");",
									"    pm.expect(jsonData.movedFolderIds[\"0\"].unid).to.have.lengthOf(32);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"move\" : [\"{{NewFolderId2}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2851) Rename TestTA3 folder to an already existing name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labelRenameTo\" : \"TestTA1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId3}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId3}}"
							]
						},
						"description": "Rename the folder to an already existing folder name."
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete folder TestTARenamed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var FolderId2 = pm.environment.get(\"NewFolderId2\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId2);",
									"});",
									"",
									"pm.environment.unset(\"NewFolderId2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId2}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId2}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete folder TestTA1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var FolderId = pm.environment.get(\"NewFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"NewFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2851) Delete label details - Delete folder TestTA3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var FolderId = pm.environment.get(\"NewFolderId3\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"NewFolderId3\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{NewFolderId3}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{NewFolderId3}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve label details after folder deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 10",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for roots folders\", function () {",
									"    var expectedViews = [\"($All)\", \"($Calendar)\", \"($Inbox)\", \"($Journal)\", \"($JunkMail)\", \"($SoftDeletions)\", \"($ToDo)\", \"($Drafts)\", \"($Sent)\" ];",
									"    var folders = jsonData.filter(folder => {",
									"        return expectedViews.includes(folder.View);",
									"    });",
									"    pm.expect(folders.length).to.equal(9);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contacts Label/folder named Friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Friends\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesContacts)\\\\Friends\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"ContactsFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Friends\",\n    \"DesignType\": \"contacts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for contacts"
					},
					"response": []
				},
				{
					"name": "Retrieve new Contacts label details after folder creation ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"console.log(jsonData);",
									"",
									"pm.test(\"Verify Friends folder\", function () {",
									"    var found = false;",
									"    const friendsFolderId = pm.environment.get(\"ContactsFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === friendsFolderId) {",
									"            // Validate folder details for the newly created contacts folder",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for new contacts folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesContacts)\\\\Friends\", \"Wrong View for new contacts folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Friends\", \"Wrong DisplayName for new contacts folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new contacts folder\");",
									"            pm.expect(folder.Type).to.equal(\"Contacts\");",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(true, \"Did not find Friends folder\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Due to /label/<labelId> not working, we will use /labels/all to retrieve all labels and search for the newly created contacts label in the returned list"
					},
					"response": []
				},
				{
					"name": "Rename Contacts Label/folder to Enemies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"ContactsFolderId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labelRenameTo\" : \"Enemies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{ContactsFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{ContactsFolderId}}"
							]
						},
						"description": "Rename the Contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "Retrieve new Contacts label details after folder rename",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"console.log(jsonData);",
									"",
									"pm.test(\"Verify Enemies folder\", function () {",
									"    var found = false;",
									"    const folderId = pm.environment.get(\"ContactsFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === folderId) {",
									"            // Validate folder details for the newly created contacts folder",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for new contacts folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesContacts)\\\\Enemies\", \"Wrong View for new contacts folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Enemies\", \"Wrong DisplayName for new contacts folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new contacts folder\");",
									"            pm.expect(folder.Type).to.equal(\"Contacts\");",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(true, \"Did not find Enemies folder\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Due to /label/<labelId> not working, we will use /labels/all to retrieve all labels and search for the newly created contacts label in the returned list"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete contacts folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"ContactsFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"ContactsFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{ContactsFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{ContactsFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "Retrieve new Contacts label details after folder delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify the folder was removed\", function () {",
									"    var found = false;",
									"    const folderId = pm.environment.get(\"ContactsFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === folderId) {",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(false, \"New contacts folder was not deleted\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Due to /label/<labelId> not working, we will use /labelsall to retrieve all labels and make sure the folder we just deleted is not listed"
					},
					"response": []
				},
				{
					"name": "Create system Drafts subfolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"ParentId\": { \"type\":\"string\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Subfolder\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"DraftsSubfolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Subfolder\",\n    \"ParentId\": \"{{DraftsSystemFolderId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Creates a subfolder in the system Drafts folder."
					},
					"response": []
				},
				{
					"name": "Retrieve system Drafts subfolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"ParentId\": { \"type\":\"string\" },",
									"         \"ParentView\": { \"type\":\"string\" },",
									"         \"ParentDisplayName\": { \"type\":\"string\" },",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FolderId).to.equal(pm.environment.get(\"DraftsSubfolderId\"), \"FolderId is not correct\");",
									"    pm.expect(jsonData.View).to.equal(\"($Drafts)\\\\Subfolder\", \"Wrong View for system Drafts' subfolder\");",
									"    pm.expect(jsonData.DocumentCount).to.equal(0, \"Wrong count for system Drafts' subfolder\");",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Subfolder\", \"Wrong DisplayName for system Drafts' subfolder\");",
									"    pm.expect(jsonData.ParentId).to.equal(pm.environment.get(\"DraftsSystemFolderId\"), \"Wrong ParentId for system Drafts' subfolder\");",
									"    pm.expect(jsonData.ParentView).to.equal(\"($Drafts)\", \"Wrong ParentView for system Drafts' subfolder\");",
									"    pm.expect(jsonData.ParentDisplayName).to.equal(\"Drafts\", \"Wrong ParentDisplayName for system Drafts' subfolder\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{DraftsSubfolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{DraftsSubfolderId}}"
							]
						},
						"description": "Gets a newly created subfolder to ensure that it was created correctly."
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2763) Retrieve all labels to ensure that created system Drafts subfolder is not missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"ParentId\": { \"type\":\"string\" },",
									"            \"ParentView\": { \"type\":\"string\" },",
									"            \"ParentDisplayName\": { \"type\":\"string\" },",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify that system Drafts' subfolder was returned\", function () {",
									"    let found = false;",
									"    const subfolderId = pm.environment.get(\"DraftsSubfolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === subfolderId) {",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(true, \"Did not find system Drafts' subfolder\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Gets all labels via /labels/all to retrieve to check whether the newly created subfolder is among them."
					},
					"response": []
				},
				{
					"name": "Delete system Drafts subfolder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const draftsSubfolderId = pm.environment.get(\"DraftsSubfolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(draftsSubfolderId);",
									"});",
									"",
									"pm.environment.unset(\"DraftsSubfolderId\");",
									"pm.environment.unset(\"DraftsSystemFolderId\");",
									"",
									"pm.test(\"Skip Calendar tests due to jsCalendar changes\", function () {",
									"    postman.setNextRequest(\"User Login - Get JWT Token for Contacts\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{DraftsSubfolderId}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{DraftsSubfolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						},
						"description": "Deletes the newly created subfolder."
					},
					"response": []
				}
			],
			"description": "Contains test against the Keep Labels API for APIs used by EWS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Calendar",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar Create a calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ALT_CAL_ID\",\"Acceptance Test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"calendarname\": \"{{ALT_CAL_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendars Retrieve list of calendars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"default calendar returned\", function() {",
									"    pm.expect(jsonData).to.have.property('default');",
									"});",
									"",
									"pm.test(\"Second calendar returned\", function() {",
									"    pm.expect(jsonData).to.have.property(pm.environment.get(\"ALT_CAL_ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/calendars",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendars"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calandar/{calid} Fetch default calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\"  },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"        },",
									"        required: [\"@unid\", \"@created\", \"CalendarDateTime\"]",
									"    }]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"CAL_ID\",\"default\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create an entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"status\": { \"type\":\"string\" },",
									"         \"statusCode\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusCode\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"CAL_ID\",\"default\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\": \"Appointment\",\n    \"Subject\": \"Acceptance Test All Day Event\",\n    \"$PublicAccess\": \"1\",\n    \"Chair\": \"CN=Bert Muppet/O=Sesame\",\n    \"From\": \"CN=Bert Muppet/O=Sesame\",\n    \"AppointmentType\": \"2\",\n    \"OrgTable\": \"P0\",\n    \"_ViewIcon\": \"9\",\n    \"Body\": \"This is created by Acceptance Tests.\",\n    \"STARTDATETIME\": \"2021-07-16T04:00:00.000Z\",\n    \"CalendarDateTime\": \"2021-07-16T04:00:00.000Z\",\n    \"EndDateTime\": \"2021-07-17T04:00:00.000Z\",\n    \"Location\": \"Test Location\",\n    \"$Alarm\": 1,\n    \"$AlarmOffset\": -900,\n    \"$AlarmUnit\": \"M\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Retrieve entry details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"unid\", \"created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"2\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test All Day Event\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0);",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0);",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"P0\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-17T04:00:00.000Z\")).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{entryid} Retrieve entry details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"2\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test All Day Event\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0);",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0);",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"P0\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-17T04:00:00.000Z\")).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Update entry details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"2\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is updated by Acceptance Tests.\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test All Day Event - UPDATED\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"99 Business St., New York, NY\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0);",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-300.0);",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"P0\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-17T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-17T04:00:00.000Z\")).to.equal(0);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-18T04:00:00.000Z\")).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\": \"Appointment\",\n    \"Subject\": \"Acceptance Test All Day Event - UPDATED\",\n    \"$PublicAccess\": \"1\",\n    \"Chair\": \"CN=Bert Muppet/O=Sesame\",\n    \"From\": \"CN=Bert Muppet/O=Sesame\",\n    \"AppointmentType\": \"2\",\n    \"OrgTable\": \"P0\",\n    \"_ViewIcon\": \"9\",\n    \"Body\": \"This is updated by Acceptance Tests.\",\n    \"STARTDATETIME\": \"2021-07-17T04:00:00.000Z\",\n    \"CalendarDateTime\": \"2021-07-17T04:00:00.000Z\",\n    \"EndDateTime\": \"2021-07-18T04:00:00.000Z\",\n    \"Location\": \"99 Business St., New York, NY\",\n    \"$Alarm\": 1,\n    \"$AlarmOffset\": -300,\n    \"$AlarmUnit\": \"M\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Update and existing calendar entry. Update the Subject, Body, date/time, location, and alarm."
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{calentryid} Removes a calendar entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"CAL_ID\");",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create a Meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"status\": { \"type\":\"string\" },",
									"         \"statusCode\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusCode\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('statusCode').to.equal(200);",
									"    pm.expect(jsonData).to.have.property('message').to.equal(\"creation complete\");",
									"    pm.expect(jsonData).to.have.property('status').to.equal(\"OK\");",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"CAL_ID\",\"default\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\": \"Appointment\",\n    \"Subject\": \"Acceptance Test Meeting\",\n    \"$PublicAccess\": \"1\",\n    \"Chair\": \"CN=Bert Muppet/O=Sesame\",\n    \"From\": \"CN=Bert Muppet/O=Sesame\",\n    \"AppointmentType\": \"3\",\n    \"OrgTable\": \"C0\",\n    \"_ViewIcon\": \"158\",\n    \"Body\": \"This is created by Acceptance Tests.\",\n    \"STARTDATETIME\": \"2021-07-16T04:00:00.000Z\",\n    \"CalendarDateTime\": \"2021-07-16T04:00:00.000Z\",\n    \"EndDateTime\": \"2021-07-16T05:00:00.000Z\",\n    \"Location\": \"Test Location\",\n    \"$Alarm\": 1,\n    \"$AlarmOffset\": -900,\n    \"$AlarmUnit\": \"M\",\n    \"requiredAttendees\": \"rustyg.mail@mail.quattro.rocks\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Reschedule a Meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"calendarEntries\": { \"type\":\"object\", \"properties\": { \"STARTDATETIME\": { \"type\": \"string\", \"format\": \"date-time\" }, \"CalendarDateTime\": { \"type\": \"string\", \"format\": \"date-time\" }, \"EndDateTime\": { \"type\": \"string\", \"format\": \"date-time\" } } },",
									"    },",
									"    required: [\"calendarEntries\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Update\": {\n        \"STARTDATETIME\": \"2021-07-16T03:00:00.000Z\",\n        \"CalendarDateTime\": \"2021-07-16T03:00:00.000Z\",\n        \"EndDateTime\": \"2021-07-16T04:00:00.000Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Retrieve entry details after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"3\", \"AppointmentType is not correct\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\", \"Body is not correct\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test Meeting\", \"Subject is not correct\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\", \"Location is not correct\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0, \"Alarm is not set\");",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\", \"Alarm unit is not correct\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0, \"Alarm offset is not correct\");",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"C0\", \"OrgTable is not correct\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\", \"PublicAccess is not correct\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Calendar date ${jsonData.CalendarDateTime} is not correct`);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Start date ${jsonData.STARTDATETIME} is not correct`);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0, `End date ${jsonData.EndDateTime} is not correct`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{entryid} Retrieve entry details after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"3\", \"AppointmentType is not correct\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\", \"Body is not correct\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test Meeting\", \"Subject is not correct\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\", \"Location is not correct\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0, \"Alarm is not set\");",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\", \"Alarm unit is not correct\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0, \"Alarm offset is not correct\");",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"C0\", \"OrgTable is not correct\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\", \"PublicAccess is not correct\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Calendar date ${jsonData.CalendarDateTime} is not correct`);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Start date ${jsonData.STARTDATETIME} is not correct`);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0, `End date ${jsonData.EndDateTime} is not correct`);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Add invitees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"calendarEntries\": { \"type\":\"object\", \"properties\": { \"RequiredAttendees\": { \"type\": \"array\", \"minItems\": 2, \"maxItems\": 2, \"uniqueItems\": true }, \"OptionalAttendees\": { \"type\": \"array\", \"minItems\": 1, \"maxItems\": 1, \"uniqueItems\": true } } }",
									"    }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Update\": { \"RequiredAttendees\": [\"rustyg.mail@mail.quattro.rocks\", \"davek.mail@mail.quattro.rocks\"], \"OptionalAttendees\": [\"rogerw.mail@mail.quattro.rocks\"] }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-769) /calandar/{calid}/{entryid} Retrieve entry details after add invitees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"3\", \"AppointmentType is not correct\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\", \"Body is not correct\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test Meeting\", \"Subject is not correct\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\", \"Location is not correct\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0, \"Alarm is not set\");",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\", \"Alarm unit is not correct\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0, \"Alarm offset is not correct\");",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"C0\", \"OrgTable is not correct\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\", \"PublicAccess is not correct\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Calendar date ${jsonData.CalendarDateTime} is not correct`);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Start date ${jsonData.STARTDATETIME} is not correct`);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0, `End date ${jsonData.EndDateTime} is not correct`);",
									"    pm.expect(jsonData.RequiredAttendees).to.have.members([\"rustyg.mail@mail.quattro.rocks\",\"davek.mail@mail.quattro.rocks\"]);",
									"    pm.expect(jsonData.OptionalAttendees).to.have.members([\"rogerw.mail@mail.quattro.rocks\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Remove invitees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"removedIds\": { \"type\": \"array\", \"minItems\": 1, \"maxItems\": 1 },",
									"         \"calendarEntries\": { \"type\": \"object\" }",
									"    },",
									"    \"required\": [\"removedIds\", \"calendarEntries\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Removed\": [ \"rogerw.mail@mail.quattro.rocks\" ],\n    \"Update\": { \"OptionalAttendees\": [] }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-769) /calandar/{calid}/{entryid} Retrieve entry details after remove invitees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"3\", \"AppointmentType is not correct\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\", \"Body is not correct\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test Meeting\", \"Subject is not correct\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\", \"Location is not correct\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0, \"Alarm is not set\");",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\", \"Alarm unit is not correct\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0, \"Alarm offset is not correct\");",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"C0\", \"OrgTable is not correct\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\", \"PublicAccess is not correct\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Calendar date ${jsonData.CalendarDateTime} is not correct`);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Start date ${jsonData.STARTDATETIME} is not correct`);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0, `End date ${jsonData.EndDateTime} is not correct`);",
									"    pm.expect(jsonData.RequiredAttendees).to.have.members([\"rustyg.mail@mail.quattro.rocks\",\"davek.mail@mail.quattro.rocks\"], \"Required attendees is not correct\");",
									"    pm.expect(jsonData).to.not.have.property(\"OptionalAttendees\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-769) /pimitem/{entryid} Retrieve entry details after remove invitees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"Chair\": { \"type\":\"string\" },",
									"         \"STARTDATETIME\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"CalendarDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"AppointmentType\": { \"type\":\"string\" },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Location\": { \"type\":\"string\" },",
									"         \"$Alarm\": { \"type\" : \"number\" },",
									"         \"$AlarmUnit\": { \"type\" : \"string\" },",
									"         \"$AlarmOffset\": { \"type\" : \"number\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"CalendarDateTime\", \"AppointmentType\", \"Body\", \"STARTDATETIME\", \"EndDateTime\", \"Subject\", \"Chair\", \"Location\", \"$Alarm\", \"$AlarmUnit\", \"$AlarmOffset\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('AppointmentType').to.equal(\"3\", \"AppointmentType is not correct\");",
									"    pm.expect(jsonData).to.have.property('Body').to.equal(\"This is created by Acceptance Tests.\", \"Body is not correct\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"Acceptance Test Meeting\", \"Subject is not correct\");",
									"    pm.expect(jsonData).to.have.property('Location').to.equal(\"Test Location\", \"Location is not correct\");",
									"    pm.expect(jsonData).to.have.property('$Alarm').to.equal(1.0, \"Alarm is not set\");",
									"    pm.expect(jsonData).to.have.property('$AlarmUnit').to.equal(\"M\", \"Alarm unit is not correct\");",
									"    pm.expect(jsonData).to.have.property('$AlarmOffset').to.equal(-900.0, \"Alarm offset is not correct\");",
									"    pm.expect(jsonData).to.have.property('OrgTable').to.equal(\"C0\", \"OrgTable is not correct\");",
									"    pm.expect(jsonData).to.have.property('$PublicAccess').to.equal(\"1\", \"PublicAccess is not correct\");",
									"    pm.expect(new Date(jsonData.CalendarDateTime) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Calendar date ${jsonData.CalendarDateTime} is not correct`);",
									"    pm.expect(new Date(jsonData.STARTDATETIME) - new Date(\"2021-07-16T03:00:00.000Z\")).to.equal(0, `Start date ${jsonData.STARTDATETIME} is not correct`);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2021-07-16T04:00:00.000Z\")).to.equal(0, `End date ${jsonData.EndDateTime} is not correct`);",
									"    pm.expect(jsonData.RequiredAttendees).to.have.members([\"rustyg.mail@mail.quattro.rocks\",\"davek.mail@mail.quattro.rocks\"], \"Required attendees is not correct\");",
									"    pm.expect(jsonData).to.not.have.property(\"OptionalAttendees\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Removes a second calendar entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.expect(jsonData).to.have.property(\"unid\").to.equal(pm.environment.get(\"ENTRY_ID\"), \"unid of returned item is not correct\");",
									"",
									"pm.environment.unset(\"CAL_ID\");",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Removes a second calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.expect(jsonData).to.have.property(\"statusCode\").to.equal(200, \"delete failed\");",
									"",
									"pm.environment.unset(\"ALT_CAL_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('ALT_CAL_ID')).to.equal(true, \"ALT_CAL_ID is not set\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{ALT_CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{ALT_CAL_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/trash Empty trash after delete calendar entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash?documents=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							],
							"query": [
								{
									"key": "documents",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Contains test against the Keep Calendar API for APIs used by EWS"
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "User Login - Get JWT Token for Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/people Test Retrieve list of contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$22\": { \"type\":\"string\" },",
									"         \"$21\": { \"type\":\"string\" },",
									"         \"$126\": { \"type\":\"string\" },",
									"         \"$19\": { \"type\":\"string\" },",
									"         \"$20\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"@unid\", \"$22\", \"$126\", \"$19\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/people",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"people"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Create contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture person id\", function () {",
									"    pm.environment.set(\"PERSON_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\":  \"Person\",\n    \"Type\":  \"Person\",\n    \"FullName\": \"Test User\",\n    \"FullNameInput\": \"Test User\",\n    \"FirstName\":  \"Test\",\n    \"LastName\": \"User\",\n    \"JobTitle\": \"Senior Tester\",\n    \"MailAddress\": \"testuser@business.hcl.com\",\n    \"work1email\": \"testuser@personal.hcl.com\",\n    \"work2email\": \"testuser@personal2.hcl.com\",\n    \"primaryPhoneNumber\": \"999-111-1111\",\n    \"PhoneNumber\": \"999-444-1111\",\n    \"CellPhoneNumber\": \"999-222-1111\",\n    \"OfficePhoneNumber\": \"999-111-1111\",\n    \"OfficeFAXPhoneNumber\": \"999-555-1111\",\n    \"PhoneNumber_1\": \"999-333-1111\",\n    \"PhoneNumber_2\": \"999-333-1111\",\n    \"OfficeStreetAddress\": \"99 Business St\",\n    \"OfficeCity\": \"Cary\",\n    \"OfficeState\": \"NC\",\n    \"OfficeZIP\": \"27760\",\n    \"OfficeCountry\": \"USA\",\n    \"StreetAddress\": \"99 Personal Ave\",\n    \"City\": \"Raleigh\",\n    \"State\": \"NC\",\n    \"Zip\": \"27765\",\n    \"country\": \"USA\",\n    \"CompanyName\": \"A Software Company\",\n    \"Location\": \"Cary, NC\",\n    \"Manager\": \"John Doe\",\n     \"Assistant\": \"John Doe\",\n     \"Spouse\": \"Jane Doe\",\n    \"Department\": \"A334\",\n    \"$PublicAccess\" :  \"1\",\n    \"Comment\": \"This is a comments section.\",\n    \"SametimeLogin\": \"testy@im.test.io\",\n    \"WebSite\": \"https://www.mysoftware.com\",\n    \"Categories\": [ \"demo1\", \"acceptance\" ]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/person",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-1913) /people Test Retrieve list of contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$22\": { \"type\":\"string\" },",
									"         \"$21\": { \"type\":\"string\" },",
									"         \"$126\": { \"type\":\"string\" },",
									"         \"$19\": { \"type\":\"string\" },",
									"         \"$20\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"@unid\", \"$22\", \"$126\", \"$19\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for duplicates\", function () {",
									"    const found = jsonData.filter(contact => contact[\"@unid\"] === pm.environment.get(\"PERSON_ID\"));",
									"    pm.expect(found.length).to.be.equal(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/people",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"people"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2995) /person/{personid} Retrieve contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FullName\": { \"type\":\"string\" },",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FullName\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FullName).to.equal(\"Test User\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"This is a comments section.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Senior Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-1111\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Capture person FullName\", function () {",
									"    pm.environment.set(\"PERSON_FULLNAME\",jsonData.FullName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresslookup Simple query for addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonDataArr = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"            \"Form\": { \"type\":\"string\" },",
									"            \"Comment\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\"},",
									"            \"FullName\": {",
									"                \"anyOf\": [",
									"                    { \"type\":\"string\" },",
									"                    { \"type\":\"array\" }",
									"                ]",
									"            },     ",
									"            \"FirstName\": { \"type\":\"string\" },",
									"            \"LastName\": { \"type\":\"string\" },",
									"            \"MiddleInitial\": { \"type\":\"string\" },",
									"            \"JobTitle\": { \"type\":\"string\" },",
									"            \"Title\": { \"type\":\"string\" },",
									"            \"Categories\": { \"type\":\"array\" },",
									"            \"Suffix\": { \"type\":\"string\" },",
									"            \"CompanyName\": { \"type\" : \"string\" },",
									"            \"Location\": { \"type\" : \"string\" },",
									"            \"Manager\": { \"type\" : \"string\" },",
									"            \"Assistant\": { \"type\" : \"string\" },",
									"            \"Spouse\": { \"type\" : \"string\" },",
									"            \"Department\": { \"type\" : \"string\" },",
									"            \"SametimeLogin\": { \"type\" : \"string\" },",
									"            \"Birthday\": { \"type\" : \"string\" },",
									"            \"Anniversary\": { \"type\" : \"string\" },",
									"            \"Website\": { \"type\" : \"string\" },",
									"            \"MailAddress\": { \"type\" : \"string\"},",
									"            \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"            \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"            \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"            \"HomeState\": { \"type\": \"string\" },",
									"            \"HomeCountry\": { \"type\": \"string\" },",
									"            \"HomeCity\": { \"type\": \"string\" },",
									"            \"HomePhone\": { \"type\" : \"string\" },",
									"            \"HomeZip\": { \"type\": \"string\" },",
									"            \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"            \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"            \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"            \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"            \"OfficeState\": { \"type\": \"string\" },",
									"            \"OfficeCountry\": { \"type\": \"string\" },",
									"            \"OfficeCity\": { \"type\": \"string\" },",
									"            \"OfficeZIP\": { \"type\": \"string\" },",
									"            \"HomeStreetAddress\": { \"type\": \"string\" }",
									"        },",
									"        required: [\"@unid\", \"@created\", \"FullName\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZIP\"],",
									"    }],",
									"    minItems: 1",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"var jsonData = jsonDataArr.find(entry => entry['@unid'] === pm.environment.get(\"PERSON_ID\"));",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FullName).to.equal(\"Test User\");    ",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"This is a comments section.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Senior Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    //pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-1111\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    //pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    //pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    //pm.expect(jsonData.HomeStreetAddress).to.equal(\"99 Personal Ave\");",
									"    //pm.expect(jsonData.HomeState).to.equal(\"NC\");",
									"    //pm.expect(jsonData.HomeCountry).to.equal(\"USA\");",
									"    //pm.expect(jsonData.HomeCity).to.equal(\"Raleigh\");",
									"    //pm.expect(jsonData.HomeZip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    //pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/addresslookup?q={{PERSON_FULLNAME}}&fulltext=false&all=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"addresslookup"
							],
							"query": [
								{
									"key": "q",
									"value": "{{PERSON_FULLNAME}}"
								},
								{
									"key": "fulltext",
									"value": "false"
								},
								{
									"key": "all",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2900) no referenceFolder returned from addresslookup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonDataArr = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"referenceFolder\": { \"type\": \"array\"}",
									"        },",
									"        required: [\"referenceFolder\"],",
									"    }],",
									"    minItems: 1",
									"};",
									"",
									"pm.test(\"Verify body schema and values\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/addresslookup?q={{PERSON_FULLNAME}}&fulltext=false&all=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"addresslookup"
							],
							"query": [
								{
									"key": "q",
									"value": "{{PERSON_FULLNAME}}"
								},
								{
									"key": "fulltext",
									"value": "false"
								},
								{
									"key": "all",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},				
				{
					"name": "FAILS (LABS-2373) addresslookup with fulltext",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/addresslookup?q={{PERSON_FULLNAME}}&count=50&fulltext=true&all=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"addresslookup"
							],
							"query": [
								{
									"key": "q",
									"value": "{{PERSON_FULLNAME}}"
								},
								{
									"key": "count",
									"value": "50"
								},
								{
									"key": "fulltext",
									"value": "true"
								},
								{
									"key": "all",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-1282) /pimitem/{personid} Retrieve contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"WorkUrl\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZIP\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"$PublicAccess\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"PhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZIP\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"This is a comments section.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Senior Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.MailAddress).to.equal(\"testuser@business.hcl.com\");",
									"    pm.expect(jsonData.primaryPhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-1111\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.PhoneNumber).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZIP).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.SametimeLogin).to.equal(\"testy@im.test.io\");",
									"    pm.expect(jsonData.WebSite).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-1282) /person/{personid} Retrieve contact details with WorkUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"WebSite\": { \"type\":\"string\"},",
									"         \"WorkUrl\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"@unid\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.WebSite).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Update contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData[\"unid\"]).to.equal(pm.environment.get(\"PERSON_ID\"), \"UNID is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Update contacts\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\": \"Person\",\n    \"JobTitle\": \"Ultra Tester\",\n    \"OfficePhoneNumber\": \"222-333-4444\",\n    \"OfficeFAXPhoneNumber\": \"222-555-7777\",\n    \"Comment\": \"An updated comment.\",\n    \"Categories\": [\n        \"tester\",\n        \"acceptance\",\n        \"demo\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contacts Label/folder named Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Family\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesContacts)\\\\Family\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"FamilyFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Family\",\n    \"DesignType\": \"contacts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for contacts"
					},
					"response": []
				},
				{
					"name": "Create Contacts Label/folder named Coworkers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Coworkers\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesContacts)\\\\Coworkers\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"CoworkersFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Coworkers\",\n    \"DesignType\": \"contacts\",\n    \"ParentId\": \"21D822802DA4AA14852567D6005BD9EB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for contacts"
					},
					"response": []
				},
				{
					"name": "Retrieve label details with two NotesContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }],",
									"    \"minItems\": 10",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for NotesContacts\", function () {",
									"    const folders = jsonData.filter(folder => folder.View.includes(\"(NotesContacts)\"));",
									"",
									"    pm.expect(folders.length).to.equal(2);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact to a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var folderId = pm.environment.get(\"FamilyFolderId\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Add Status\", function () {",
									"    pm.expect(jsonData[\"Add Status\"]).to.include(`Successful addition of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for addedIds\", function () {",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"message\"]).to.include(\"add successful\");",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Add contact to a folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\"{{PERSON_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{FamilyFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{FamilyFolderId}}"
							]
						},
						"description": "Add a newly created contact into a folder"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2995) /person/{personid} Retrieve contact details after add to folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly added to the Family folder"
					},
					"response": []
				},
				{
					"name": "/pimitem/{personid} Retrieve contact details after add to folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZIP\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"$PublicAccess\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"PhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZIP\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    const familyFolderId = pm.environment.get(\"FamilyFolderId\");",
									"    pm.expect(jsonData[\"referenceFolder\"]).to.eql([familyFolderId]);",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.MailAddress).to.equal(\"testuser@business.hcl.com\");",
									"    pm.expect(jsonData.primaryPhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.PhoneNumber).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZIP).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.SametimeLogin).to.equal(\"testy@im.test.io\");",
									"    pm.expect(jsonData.WebSite).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve contact details after add to folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly added to the Family folder"
					},
					"response": []
				},
				{
					"name": "Move a contact to Coworkers folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for movedIds\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{PERSON_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{CoworkersFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{CoworkersFolderId}}"
							]
						},
						"description": "Move a newly created contact into a different folder"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2995) /person/{personid} Retrieve contact details after move to folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", /*\"$PublicAccess\",*/ \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly moved to the Coworkers folder"
					},
					"response": []
				},
				{
					"name": "/pimitem/{personid} Retrieve contact details after move to folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZIP\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"$PublicAccess\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"PhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZIP\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    const folderId = pm.environment.get(\"CoworkersFolderId\");",
									"    pm.expect(jsonData[\"referenceFolder\"]).to.eql([folderId]);",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.MailAddress).to.equal(\"testuser@business.hcl.com\");",
									"    pm.expect(jsonData.primaryPhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.PhoneNumber).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZIP).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.SametimeLogin).to.equal(\"testy@im.test.io\");",
									"    pm.expect(jsonData.WebSite).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve contact details after move to folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly moved to the Coworkers folder"
					},
					"response": []
				},
				{
					"name": "Remove a contact from a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Remove Status\", function () {",
									"    var folderId = pm.environment.get(\"CoworkersFolderId\");",
									"    pm.expect(jsonData[\"Remove Status\"]).to.include(`Successful removal of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for removedIds\", function () {",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"message\"]).to.include(\"remove successful\");",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\"{{PERSON_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{CoworkersFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{CoworkersFolderId}}"
							]
						},
						"description": "Remvoe a newly created contact from the Coworkers folder"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2995) /person/{personid} Retrieve contact details after remove from folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Public\": { \"type\":\"string\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", /*\"Categories\", */ \"Public\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly removed from the Coworkers folder"
					},
					"response": []
				},
				{
					"name": "/pimitem/{personid} Retrieve contact details after remove from folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Manager\": { \"type\" : \"string\" },",
									"         \"Assistant\": { \"type\" : \"string\" },",
									"         \"Spouse\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZIP\": { \"type\": \"string\" },",
									"         \"StreetAddress\": { \"type\": \"string\" },",
									"         \"State\": { \"type\": \"string\" },",
									"         \"country\": { \"type\": \"string\" },",
									"         \"City\": { \"type\": \"string\" },",
									"         \"Zip\": { \"type\": \"string\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"$PublicAccess\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"PhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZIP\", \"StreetAddress\", \"State\", \"City\", \"country\", \"Zip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"$FolderRef\"]).to.equal(undefined);",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"An updated comment.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Ultra Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.MailAddress).to.equal(\"testuser@business.hcl.com\");",
									"    pm.expect(jsonData.primaryPhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"222-333-4444\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"222-555-7777\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.PhoneNumber).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZIP).to.equal(\"27760\");",
									"    pm.expect(jsonData.StreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.State).to.equal(\"NC\");",
									"    pm.expect(jsonData.country).to.equal(\"USA\");",
									"    pm.expect(jsonData.City).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.Zip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Manager).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Assistant).to.equal(\"John Doe\");",
									"    pm.expect(jsonData.Spouse).to.equal(\"Jane Doe\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.SametimeLogin).to.equal(\"testy@im.test.io\");",
									"    pm.expect(jsonData.WebSite).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories).to.equal(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve contact details after remove from folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact is correctly removed from the Coworkers folder"
					},
					"response": []
				},
				{
					"name": "/pimitem/{personid} update pimItem contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"},",
									"         \"statusText\": {\"type\": \"string\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\", \"statusText\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.be.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData[\"unid\"]).to.equal(pm.environment.get(\"PERSON_ID\"), \"UNID is not correct\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"update pimItem\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"FirstName\":  \"UpdatedTest\",\n    \"LastName\": \"UpdatedUser\",\n    \"JobTitle\": \"Updated Senior Tester\",\n    \"MailAddress\": \"updateduser@business.hcl.com\",\n    \"Work1Email\": \"updateduser@personal.hcl.com\",\n    // \"Work2Email\": \"tupdateduser@personal2.hcl.com\",\n    \"primaryPhoneNumber\": \"999-222-2222\",\n    \"PhoneNumber\": \"999-444-2222\",\n    \"CellPhoneNumber\": \"999-222-2222\",\n    \"OfficePhoneNumber\": \"999-111-2222\",\n    \"OfficeFAXPhoneNumber\": \"999-555-2222\",\n    \"PhoneNumber_1\": \"999-333-2222\",\n    \"PhoneNumber_2\": \"999-333-2222\",\n    \"OfficeStreetAddress\": \"99 Updated St\",\n    \"OfficeCity\": \"Westford\",\n    \"OfficeState\": \"MA\",\n    \"OfficeZIP\": \"32516\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2262 and LABS-2263) /pimitem/{personid} Retrieve pimItem contacts after update ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work2Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"primaryPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeFAXPhoneNumber\": { \"type\" : \"string\" },",
									"         \"PhoneNumber_1\": { \"type\" : \"string\" },",
									"         \"PhoneNumber_2\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeZIP\": { \"type\": \"string\" },",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"JobTitle\", \"MailAddress\", \"primaryPhoneNumber\", \"PhoneNumber\", \"CellPhoneNumber\", \"OfficePhoneNumber\", \"OfficeFAXPhoneNumber\", \"PhoneNumber_1\", \"PhoneNumber_2\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeState\", \"OfficeZIP\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.FirstName).to.equal(\"UpdatedTest\");",
									"    pm.expect(jsonData.LastName).to.equal(\"UpdatedUser\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Updated Senior Tester\");",
									"    pm.expect(jsonData.MailAddress).to.equal(\"updateduser@business.hcl.com\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"updateduser@personal.hcl.com\");",
									"    pm.expect(jsonData.Work2Email).to.equal(\"tupdateduser@personal2.hcl.com\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-2222\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-2222\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Updated St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"MA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Westford\");",
									"    pm.expect(jsonData.OfficeZIP).to.equal(\"32516\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Delete contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"pm.test(\"Successful deletion\", function () {",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									"",
									"pm.environment.unset(\"PERSON_ID\");",
									"pm.environment.unset(\"PERSON_FULLNAME\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete contacts folder Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"FamilyFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"FamilyFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{FamilyFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{FamilyFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete contacts folder Coworkers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"CoworkersFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"CoworkersFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{CoworkersFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{CoworkersFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "/person Create contact with work emails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture person id\", function () {",
									"    pm.environment.set(\"PERSON_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\": \"Person\",\n    \"Type\": \"Person\",\n    \"FullName\": \"Test User\",\n    \"FullNameInput\": \"Test User\",\n    \"FirstName\": \"Test\",\n    \"LastName\": \"User\",\n    \"JobTitle\": \"Senior Tester\",\n    \"MailAddress\": \"testuser@business.hcl.com\",\n    \"Work1Email\": \"testuser@personal.hcl.com\",\n    \"Work2Email\": \"testuser@personal2.hcl.com\",\n    \"primaryPhoneNumber\": \"999-111-1111\",\n    \"PhoneNumber\": \"999-444-1111\",\n    \"CellPhoneNumber\": \"999-222-1111\",\n    \"OfficePhoneNumber\": \"999-111-1111\",\n    \"OfficeFAXPhoneNumber\": \"999-555-1111\",\n    \"PhoneNumber_1\": \"999-333-1111\",\n    \"PhoneNumber_2\": \"999-333-1111\",\n    \"OfficeStreetAddress\": \"99 Business St\",\n    \"OfficeCity\": \"Cary\",\n    \"OfficeState\": \"NC\",\n    \"OfficeZIP\": \"27760\",\n    \"OfficeCountry\": \"USA\",\n    \"StreetAddress\": \"99 Personal Ave\",\n    \"City\": \"Raleigh\",\n    \"State\": \"NC\",\n    \"Zip\": \"27765\",\n    \"country\": \"USA\",\n    \"CompanyName\": \"A Software Company\",\n    \"Location\": \"Cary, NC\",\n    \"Department\": \"A334\",\n    \"$PublicAccess\": \"1\",\n    \"Comment\": \"This is a comments section.\",\n    \"SametimeLogin\": \"testy@im.test.io\",\n    \"WebSite\": \"https://www.mysoftware.com\",\n    \"Categories\": [\n        \"demo1\",\n        \"acceptance\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/person",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/{personid} Retrieve contact details with work emails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"Work1Email\": { \"type\":\"string\", \"format\":\"email\" },",
									"         \"Work2Email\": { \"type\":\"string\", \"format\":\"email\" }",
									"    },",
									"    required: [\"@unid\", \"Work1Email\", \"Work2Email\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.Work2Email).to.equal(\"testuser@personal2.hcl.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-2264) /pimitem/{personid} Retrieve contact details with work emails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"Work1Email\": { \"type\":\"string\", \"format\":\"email\" },",
									"         \"Work2Email\": { \"type\":\"string\", \"format\":\"email\" }",
									"    },",
									"    required: [\"@unid\", \"Work1Email\", \"Work2Email\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.Work2Email).to.equal(\"testuser@personal2.hcl.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Delete contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"pm.test(\"Successful deletion\", function () {",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									"",
									"pm.environment.unset(\"PERSON_ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Create contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture person id\", function () {",
									"    pm.environment.set(\"PERSON_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Form\":  \"Person\",\n    \"Type\":  \"Person\",\n    \"FullName\": \"Test User\",\n    \"FullNameInput\": \"Test User\",\n    \"FirstName\":  \"Test\",\n    \"LastName\": \"User\",\n    \"JobTitle\": \"Senior Tester\",\n    \"MailAddress\": \"testuser@business.hcl.com\",\n    \"work1email\": \"testuser@personal.hcl.com\",\n    \"work2email\": \"testuser@personal2.hcl.com\",\n    \"primaryPhoneNumber\": \"999-111-1111\",\n    \"PhoneNumber\": \"999-444-1111\",\n    \"CellPhoneNumber\": \"999-222-1111\",\n    \"OfficePhoneNumber\": \"999-111-1111\",\n    \"OfficeFAXPhoneNumber\": \"999-555-1111\",\n    \"PhoneNumber_1\": \"999-333-1111\",\n    \"PhoneNumber_2\": \"999-333-1111\",\n    \"OfficeStreetAddress\": \"99 Business St\",\n    \"OfficeCity\": \"Cary\",\n    \"OfficeState\": \"NC\",\n    \"OfficeZIP\": \"27760\",\n    \"OfficeCountry\": \"USA\",\n    \"StreetAddress\": \"99 Personal Ave\",\n    \"City\": \"Raleigh\",\n    \"State\": \"NC\",\n    \"Zip\": \"27765\",\n    \"country\": \"USA\",\n    \"CompanyName\": \"A Software Company\",\n    \"Location\": \"Cary, NC\",\n    \"Department\": \"A334\",\n    \"$PublicAccess\" :  \"1\",\n    \"Comment\": \"This is a comments section.\",\n    \"SametimeLogin\": \"testy@im.test.io\",\n    \"WebSite\": \"https://www.mysoftware.com\",\n    \"Categories\": [ \"demo1\", \"acceptance\" ]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/person",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contacts Label/folder named Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Family\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesContacts)\\\\Family\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"FamilyFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Family\",\n    \"DesignType\": \"contacts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for contacts"
					},
					"response": []
				},
				{
					"name": "Create Contacts Label/folder named Coworkers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Coworkers\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesContacts)\\\\Coworkers\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"CoworkersFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Coworkers\",\n    \"DesignType\": \"contacts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for contacts"
					},
					"response": []
				},
				{
					"name": "Add contact to a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var folderId = pm.environment.get(\"FamilyFolderId\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Add Status\", function () {",
									"    pm.expect(jsonData[\"Add Status\"]).to.include(`Successful addition of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for addedIds\", function () {",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"message\"]).to.include(\"add successful\");",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Add contact to a folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\"{{PERSON_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{FamilyFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{FamilyFolderId}}"
							]
						},
						"description": "Add a newly created contact into a folder"
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-773) /person/{personid} Retrieve contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeState\": { \"type\": \"string\" },",
									"         \"HomeCountry\": { \"type\": \"string\" },",
									"         \"HomeCity\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"HomeZip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"HomeStreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"HomeStreetAddress\", \"HomeState\", \"HomeCity\", \"HomeCountry\", \"HomeZip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"This is a comments section.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Senior Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-1111\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.HomeStreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.HomeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.HomeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.HomeCity).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.HomeZip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Move a contact to Coworkers folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for movedIds\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{PERSON_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{CoworkersFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{CoworkersFolderId}}"
							]
						},
						"description": "Move a newly created contact into a different folder"
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-773) /person/{personid} Retrieve contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$TUA\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\",  \"format\": \"date-time\" },",
									"         \"Form\": { \"type\":\"string\" },",
									"         \"Comment\": { \"type\":\"string\" },",
									"         \"Type\": { \"type\":\"string\"},",
									"         \"FirstName\": { \"type\":\"string\" },",
									"         \"LastName\": { \"type\":\"string\" },",
									"         \"MiddleInitial\": { \"type\":\"string\" },",
									"         \"JobTitle\": { \"type\":\"string\" },",
									"         \"Title\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"array\" },",
									"         \"Suffix\": { \"type\":\"string\" },",
									"         \"CompanyName\": { \"type\" : \"string\" },",
									"         \"Location\": { \"type\" : \"string\" },",
									"         \"Department\": { \"type\" : \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\" },",
									"         \"Birthday\": { \"type\" : \"string\" },",
									"         \"Anniversary\": { \"type\" : \"string\" },",
									"         \"Website\": { \"type\" : \"string\" },",
									"         \"MailAddress\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"Work1Email\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeEmail\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"email_1\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"HomeState\": { \"type\": \"string\" },",
									"         \"HomeCountry\": { \"type\": \"string\" },",
									"         \"HomeCity\": { \"type\": \"string\" },",
									"         \"HomePhone\": { \"type\" : \"string\" },",
									"         \"HomeZip\": { \"type\": \"string\" },",
									"         \"SametimeLogin\": { \"type\" : \"string\", \"format\":\"email\" },",
									"         \"OfficePhoneNumber\": { \"type\" : \"string\" },",
									"         \"CellPhoneNumber\": { \"type\" : \"string\" },",
									"         \"OfficeStreetAddress\": { \"type\": \"string\" },",
									"         \"OfficeState\": { \"type\": \"string\" },",
									"         \"OfficeCountry\": { \"type\": \"string\" },",
									"         \"OfficeCity\": { \"type\": \"string\" },",
									"         \"OfficeZip\": { \"type\": \"string\" },",
									"         \"HomeStreetAddress\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"FirstName\", \"LastName\", \"Form\", \"Comment\", \"Type\", \"Categories\", \"CompanyName\", \"OfficePhoneNumber\", \"CellPhoneNumber\", \"OfficeStreetAddress\", \"OfficeCity\", \"OfficeCountry\", \"OfficeState\", \"OfficeZip\", \"HomeStreetAddress\", \"HomeState\", \"HomeCity\", \"HomeCountry\", \"HomeZip\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Type).to.equal(\"Person\");",
									"    pm.expect(jsonData.FirstName).to.equal(\"Test\");",
									"    pm.expect(jsonData.LastName).to.equal(\"User\");",
									"    pm.expect(jsonData.Comment).to.include(\"This is a comments section.\");",
									"    pm.expect(jsonData.JobTitle).to.equal(\"Senior Tester\");",
									"    pm.expect(jsonData.CompanyName).to.equal(\"A Software Company\");",
									"    pm.expect(jsonData.Work1Email).to.equal(\"testuser@personal.hcl.com\");",
									"    pm.expect(jsonData.OfficePhoneNumber).to.equal(\"999-111-1111\");",
									"    pm.expect(jsonData.OfficeFAXPhoneNumber).to.equal(\"999-555-1111\");",
									"    pm.expect(jsonData.CellPhoneNumber).to.equal(\"999-222-1111\");",
									"    pm.expect(jsonData.HomePhone).to.equal(\"999-444-1111\");",
									"    pm.expect(jsonData.OfficeStreetAddress).to.equal(\"99 Business St\");",
									"    pm.expect(jsonData.OfficeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.OfficeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.OfficeCity).to.equal(\"Cary\");",
									"    pm.expect(jsonData.OfficeZip).to.equal(\"27760\");",
									"    pm.expect(jsonData.HomeStreetAddress).to.equal(\"99 Personal Ave\");",
									"    pm.expect(jsonData.HomeState).to.equal(\"NC\");",
									"    pm.expect(jsonData.HomeCountry).to.equal(\"USA\");",
									"    pm.expect(jsonData.HomeCity).to.equal(\"Raleigh\");",
									"    pm.expect(jsonData.HomeZip).to.equal(\"27765\");",
									"    pm.expect(jsonData.Location).to.equal(\"Cary, NC\");",
									"    pm.expect(jsonData.Department).to.equal(\"A334\");",
									"    pm.expect(jsonData.WorkUrl).to.equal(\"https://www.mysoftware.com\");",
									"    pm.expect(jsonData.Categories.length).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person Delete contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"pm.test(\"Successful deletion\", function () {",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									"",
									"pm.environment.unset(\"PERSON_ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete contacts folder Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"FamilyFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"FamilyFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{FamilyFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{FamilyFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete contacts folder Coworkers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"CoworkersFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"CoworkersFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{CoworkersFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{CoworkersFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the contacts folder we just created"
					},
					"response": []
				},
				{
					"name": "/person Create contact with additional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture person id\", function () {",
									"    pm.environment.set(\"PERSON_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AdditionalFields\": {\n        \"foo\": \"bar\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/person",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{personid} Retrieve contact details with additional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"        \"AdditionalFields\" : {\"type\" : \"object\"}",
									"    },",
									"    required: [\"@unid\", \"AdditionalFields\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"   pm.expect(jsonData[\"AdditionalFields\"].foo).to.equal(\"bar\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact contain additional fields"
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-1274) /person/{personid} Retrieve contact details with additional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"        \"AdditionalFields\" : {\"type\" : \"object\"}",
									"    },",
									"    required: [\"@unid\", \"AdditionalFields\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"   pm.expect(jsonData[\"AdditionalFields\"].foo).to.equal(\"bar\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						},
						"description": "Verify that the contact contain additional fields"
					},
					"response": []
				},
				{
					"name": "/person Delete contact details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"pm.test(\"Successful deletion\", function () {",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"PERSON_ID\"));",
									"});",
									"",
									"pm.environment.unset(\"PERSON_ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/person/{{PERSON_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"person",
								"{{PERSON_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/avatar Get the avatar for the provided email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"image/png\");",
									"});",
									"",
									"pm.test(\"Response body is present\", function () {",
									"    pm.expect(pm.response.text().length > 0).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Accept",
								"value": "image/png",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/avatar?email={{AdminName}}&height=48&width=48",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"avatar"
							],
							"query": [
								{
									"key": "email",
									"value": "{{AdminName}}"
								},
								{
									"key": "height",
									"value": "48"
								},
								{
									"key": "width",
									"value": "48"
								}
							]
						},
						"description": "Get the avatar for the provided email"
					},
					"response": []
				}
			],
			"description": "Contains test against the Keep Contacts API for APIs used by EWS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tasks Retrieve list of tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"Subject\": { \"type\":\"string\" },",
									"         \"$190\": { \"type\":\"string\" },",
									"         \"DueDateTime\": { \"type\":\"string\", \"format\": \"date-time\"},",
									"         \"$188\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"@unid\", \"Subject\", \"DueDateTime\", \"$188\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/tasks",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/task Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture task unid\", function () {",
									"    pm.environment.set(\"TASK_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@type\": \"jstask\",\n    \"title\": \"Created in Postman\",\n    \"description\": \"This is an item created by Keep API Acceptance tests.\",\n    \"start\": \"2022-08-25T08:00:00.000Z\",\n    \"due\": \"2022-08-28T11:59:00.000Z\",\n    \"priority\": 2,\n    \"progress\": \"needs-action\",\n    \"privacy\": \"public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/task",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "/task/{uuid} Retrieve task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@type\": { \"type\":\"string\"},",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"updated\": { \"type\": \"string\"},",
									"         \"description\": { \"type\":\"string\" },",
									"         \"due\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" },",
									"         \"participants\" : {\"type\" : \"object\"}",
									"    },",
									"    required: [\"@type\", \"uid\", \"description\", \"due\", \"start\", \"title\", \"participants\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"@type\"]).to.equal(\"jstask\", \"type is not correct\");",
									"    pm.expect(jsonData[\"uid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"uid is not correct\");",
									"    pm.expect(jsonData.description).to.equal(\"This is an item created by Keep API Acceptance tests.\", \"description is not correct\");",
									"    pm.expect(new Date(jsonData.start) - new Date(\"2022-08-25T08:00:00Z\")).to.equal(0, \"Start date/time is wrong\");",
									"    pm.expect(jsonData.progress).to.equal(\"needs-action\", \"progress is not correct\");",
									"    pm.expect(jsonData.priority).to.equal(2, \"priority is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('TASK_ID')).to.equal(true, \"TASK_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Retrieve task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@type\": { \"type\": \"string\"},",
									"         \"description\": { \"type\":\"string\" },",
									"         \"due\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@type\", \"uid\", \"description\", \"due\", \"start\", \"title\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"uid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"UID is not correct\");",
									"    pm.expect(jsonData.description).to.equal(\"This is an item created by Keep API Acceptance tests.\", \"Body is not correct\");",
									"    pm.expect(new Date(jsonData.start) - new Date(\"2022-08-25T08:00:00Z\")).to.equal(0, \"Start date/time is wrong\");",
									"    pm.expect(new Date(jsonData.due) - new Date(\"2022-08-28T11:59:00Z\")).to.equal(0, \"Due date/time is wrong\");",
									"    pm.expect(jsonData[\"@type\"]).to.equal(\"jstask\", \"Form is not correct\");",
									"    pm.expect(jsonData.progress).to.equal(\"needs-action\", \"Due state is not correct\");",
									"    pm.expect(jsonData.priority).to.equal(2, \"Importance is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('TASK_ID')).to.equal(true, \"TASK_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TASK_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/task/{uuid} Update a task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\", \"statusText\", \"status\", \"message\" ]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"unid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"uid is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('TASK_ID')).to.equal(true, \"TASK_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"@type\": \"jstask\",\r\n    \"title\": \"Updated in Postman\",\r\n    \"description\": \"This is an item created by Keep API Acceptance tests. It has been updated to a high priority task.\",\r\n    \"start\": \"2022-08-25T08:00:00.000Z\",\r\n    \"due\": \"2022-08-28T11:59:00.000Z\",\r\n    \"priority\": 2,\r\n    \"privacy\": \"public\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "This will fail because returned data in 0.8.14 does not contain @unid field (LABS-1461)."
					},
					"response": []
				},
				{
					"name": "/task/{uuid} Retrieve updated task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@type\": { \"type\":\"string\"},",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"updated\": { \"type\": \"string\"},",
									"         \"description\": { \"type\":\"string\" },",
									"         \"due\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" },",
									"         \"participants\" : {\"type\" : \"object\"}",
									"    },",
									"    required: [\"@type\", \"uid\", \"description\", \"due\", \"start\", \"title\", \"participants\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"@type\"]).to.equal(\"jstask\", \"type is not correct\");",
									"    pm.expect(jsonData[\"uid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"uid is not correct\");",
									"    pm.expect(jsonData.title).to.equal(\"Updated in Postman\", \"title is not correct\");    ",
									"    pm.expect(jsonData.description).to.equal(\"This is an item created by Keep API Acceptance tests. It has been updated to a high priority task.\", \"description is not correct\");",
									"    pm.expect(new Date(jsonData.start) - new Date(\"2022-08-25T08:00:00Z\")).to.equal(0, \"Start date/time is wrong\");",
									"    pm.expect(jsonData.progress).to.equal(\"needs-action\", \"progress is not correct\");",
									"    pm.expect(jsonData.priority).to.equal(2, \"priority is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('TASK_ID')).to.equal(true, \"TASK_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Tasks Label/folder named Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Todo\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesTasks)\\\\Todo\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"TodosFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Create Tasks Label/folder named Todo\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Todo\",\n    \"DesignType\": \"tasks\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder with name Todo for tasks"
					},
					"response": []
				},
				{
					"name": "Create Tasks Label/folder named Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Done\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesTasks)\\\\Done\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"DoneFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Create Tasks Label/folder named Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Done\",\n    \"DesignType\": \"tasks\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder with name Done for tasks"
					},
					"response": []
				},
				{
					"name": "Retrieve and verify new tasks folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFolder\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify Todo folder\", function () {",
									"    var todoFound = false;",
									"    var doneFound = false;",
									"    const todosId = pm.environment.get(\"TodosFolderId\");",
									"    const doneId = pm.environment.get(\"DoneFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === todosId) {",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for tasks in Todos folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesTasks)\\\\Todo\", \"Wrong View for new tasks folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Todo\", \"Wrong DisplayName for new tasks folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new tasks folder\");",
									"            pm.expect(folder.Type).to.equal(\"Tasks\");",
									"            todoFound = true;",
									"        }",
									"",
									"        if (folder.FolderId === doneId) {",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for tasks in Done folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesTasks)\\\\Done\", \"Wrong View for new tasks folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Done\", \"Wrong DisplayName for new tasks folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new tasks folder\");",
									"            pm.expect(folder.Type).to.equal(\"Tasks\");",
									"            doneFound = true;",
									"        }",
									"    });",
									"     ",
									"    pm.expect(todoFound).to.equal(true, \"Did not find Todo folder\");",
									"    pm.expect(doneFound).to.equal(true, \"Did not find Done folder\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve and verify new tasks folders\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Retrieve and verify the tasks folders"
					},
					"response": []
				},
				{
					"name": "Add tasks to Todo folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var folderId = pm.environment.get(\"TodosFolderId\");",
									" ",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Add Status\", function () {",
									"    pm.expect(jsonData[\"Add Status\"]).to.include(`Successful addition of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for addedIds\", function () {",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"message\"]).to.include(\"add successful\");",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TASK_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Add tasks to Todo folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\"{{TASK_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{TodosFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{TodosFolderId}}"
							]
						},
						"description": "Add a newly created task into a Todo folder"
					},
					"response": []
				},
				{
					"name": "/tasks/{uuid} Retrieve a task after add to Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"updated\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"description\": { \"type\": \"string\" },",
									"         \"due\": {\"type\":\"string\", \"format\": \"date-time\"},",
									"         \"start\" : { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"participants\" : { \"type\": \"object\" },",
									"         \"title\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"uid\", \"updated\", \"description\", \"due\",  \"start\" , \"participants\", \"title\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    //pm.expect(jsonData).to.have.property('Form').to.equal(\"Task\");",
									"   //TODO: uncomment when LABS-660 is fixed.",
									"    pm.expect(jsonData).to.have.property('description').to.equal(\"This is an item created by Keep API Acceptance tests. It has been updated to a high priority task.\");",
									"    pm.expect(jsonData).to.have.property('title').to.equal(\"Updated in Postman\");",
									"    const folderId = pm.environment.get(\"TodosFolderId\");",
									"    pm.expect(jsonData).to.have.property(\"referenceFolder\").to.eql([folderId]);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve task after add to Todo\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "Retreive a task after adding to Todo folder"
					},
					"response": []
				},
				{
					"name": "Move a task to Done folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for movedIds\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TASK_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Move task to Done folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{TASK_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{DoneFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{DoneFolderId}}"
							]
						},
						"description": "Move a newly created task into a different(Done) folder"
					},
					"response": []
				},
				{
					"name": "/tasks/{uuid} Retrieve a task after move to Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"updated\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" },",
									"         \"description\": { \"type\": \"string\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"participants\" : { \"type\": \"object\" }",
									"    },",
									"    required: [\"uid\",\"updated\", \"title\", \"description\",\"participants\",\"start\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"  //..  pm.expect(jsonData).to.have.property('Form').to.equal(\"Task\");",
									"    //TODO: Uncomment the below line of code when LABS-660 is fixed.",
									"    pm.expect(jsonData).to.have.property('description').to.equal(\"This is an item created by Keep API Acceptance tests. It has been updated to a high priority task.\");",
									"    pm.expect(jsonData).to.have.property('title').to.equal(\"Updated in Postman\");",
									"    const folderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData).to.have.property(\"referenceFolder\").to.eql([folderId]);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve a task after move to Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "Retrieve a task after move to different(Done) folder"
					},
					"response": []
				},
				{
					"name": "Remove a task from Done folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Remove Status\", function () {",
									"    var folderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData[\"Remove Status\"]).to.include(`Successful removal of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for removedIds\", function () {",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"message\"]).to.include(\"remove successful\");",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TASK_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Remove a task from Done folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\"{{TASK_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{DoneFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{DoneFolderId}}"
							]
						},
						"description": "Remove a newly created task from the Done folder"
					},
					"response": []
				},
				{
					"name": "/tasks/{uuid} Retrieve a task after remove from Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"due\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"updated\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" },",
									"         \"description\": { \"type\": \"string\" },",
									"         \"participants\": { \"type\": \"object\" }",
									"    },",
									"    required: [\"uid\", \"updated\", \"title\", \"description\",\"participants\", \"start\", \"due\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"  //  pm.expect(jsonData).to.have.property('Form').to.equal(\"Task\");",
									"    //TODO: Uncomment the below line of code when LABS-660 is fixed.",
									"    pm.expect(jsonData).to.have.property('description').to.equal(\"This is an item created by Keep API Acceptance tests. It has been updated to a high priority task.\");",
									"    pm.expect(jsonData).to.have.property('title').to.equal(\"Updated in Postman\");",
									"    pm.expect(jsonData).to.not.have.property('$FolderRef');",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve task after remove from Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "Retrieve a task after removing from Done folder"
					},
					"response": []
				},
				{
					"name": "Rename Tasks Todo Label/folder to Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    // pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify properties for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"TodosFolderId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Rename Tasks Todo Labelfolder to items\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labelRenameTo\" : \"Items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{TodosFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{TodosFolderId}}"
							]
						},
						"description": "Rename the Tasks folder that was just created"
					},
					"response": []
				},
				{
					"name": "Retrieve and verify renamed tasks folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify Items folder\", function () {",
									"    var found = false;",
									"    const todosId = pm.environment.get(\"TodosFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === todosId) {",
									"            // Validate folder details for the newly created contacts folder",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for notes in folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesTasks)\\\\Items\", \"Wrong View for new tasks folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Items\", \"Wrong DisplayName for new tasks folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new tasks folder\");",
									"            pm.expect(folder.Type).to.equal(\"Tasks\");",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(true, \"Did not find Items folder\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve and verify renamed tasks folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Retrieve and verify renamed tasks folder"
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} update pimitem tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"},",
									"         \"statusText\": {\"type\": \"string\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\", \"statusText\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"TASK_ID\"), \"UNID is not correct\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"update pimitem task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@type\": \"jstask\",\n    \"title\": \"Updated - Created in Postman\",\n    \"description\": \"Checking the update pimitem for task\",\n    \"start\": \"2022-08-25T08:00:00.000Z\",\n    \"due\": \"2022-08-28T11:59:00.000Z\",\n    \"priority\": 2,\n    \"progress\": \"needs-action\",\n    \"privacy\": \"public\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TASK_ID}}"
							]
						},
						"description": "update the pimitem tasks\n"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2267) /pimitem/{uuid} Retrieve pimitem tasks after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@type\": { \"type\": \"string\"},",
									"         \"description\": { \"type\":\"string\" },",
									"         \"due\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"start\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"title\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@type\", \"uid\", \"description\", \"title\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"uid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"UID is not correct\");",
									"    pm.expect(jsonData.title).to.equal(\"Updated - Created in Postman\", \"title is not correct\");",
									"    pm.expect(jsonData.description).to.equal(\"Checking the update pimitem for task\", \"description is not correct\");",
									"    pm.expect(new Date(jsonData.start) - new Date(\"2022-08-25T08:00:00Z\")).to.equal(0, \"Start date/time is wrong\");",
									"    pm.expect(new Date(jsonData.due) - new Date(\"2022-08-28T11:59:00Z\")).to.equal(0, \"Due date/time is wrong\");",
									"    pm.expect(jsonData[\"@type\"]).to.equal(\"jstask\", \"Form is not correct\");",
									"    pm.expect(jsonData.progress).to.equal(\"needs-action\", \"progress is not correct\");",
									"    pm.expect(jsonData.priority).to.equal(2, \"priority is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve and verify updated values\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TASK_ID}}"
							]
						},
						"description": "Retrieve and verify updated pimitem tasks"
					},
					"response": []
				},
				{
					"name": "/task/{uuid} Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with TASK_ID",
									"pm.environment.unset(\"TASK_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "Delete task that was created"
					},
					"response": []
				},
				{
					"name": "/tasks Retrieve list of tasks entries after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"[{\"@unid\":\"774AB8610A04728B002586B700675E9F\",\"@noteid\":2590,\"@index\":\"1\",\"$191\":\"\",\"$190\":\"\",\"$192\":\"0.0\",\"$186\":\"[152.0, 0.0]\",\"DueDateTime\":\"2022-08-28T11:59:00Z\",\"$188\":\"Not Started\",\"$187\":\"Created in Postman\",\"Subject\":\"Created in Postman\",\"$189\":\"0.0\"}]",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minLength\": 0,",
									"    \"maxLength\": 0,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"Subject\": { \"type\":\"string\" }, // Subject",
									"         \"$44\": { \"type\":\"string\", \"format\": \"date-time\" }, // Diary date",
									"        },",
									"        required: [\"@unid\", \"Subject\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve list of tasks entries after delete\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/tasks",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "Retrieve the list of tasks entries after deleting"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete tasks folder Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"TodosFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"TodosFolderId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete tasks folder Todo\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{TodosFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{TodosFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the tasks folder Todo that was created"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete tasks folder Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"DoneFolderId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete tasks folder Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{DoneFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{DoneFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the tasks folder Done that was created"
					},
					"response": []
				},
				{
					"name": "/task Create task with alert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture task unid\", function () {",
									"    pm.environment.set(\"TASK_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@type\": \"jstask\",\n    \"title\": \"test outlook alert2\",\n    \"description\": \"528 at 2pm alert\",\n    \"priority\": 5,\n    \"privacy\": \"private\",\n    \"timeZone\": \"America/New_York\",\n    \"start\": \"2021-05-26T07:59:00.000\",\n    \"due\": \"2021-05-29T07:59:00.000\",\n    \"alerts\": {\n        \"cbbf369a-448d-4577-af5a-09a7cc2f1456\": {\n            \"@type\": \"Alert\",\n            \"trigger\": {\n                \"@type\": \"OffsetTrigger\",\n                \"offset\": \"PT-54H1M\"\n            }\n        }\n    },\n    \"AdditionalFields\": {\n        \"xHCL-com.domino.taskType\": \"1\",\n        \"xHCL-extProp_0\": {\n            \"DistinguishedPropertySetId\": \"Common\",\n            \"PropertyId\": 34051,\n            \"PropertyType\": \"Boolean\",\n            \"Value\": \"true\"\n        },\n        \"xHCL-extProp_1\": {\n            \"DistinguishedPropertySetId\": \"Task\",\n            \"PropertyId\": 33031,\n            \"PropertyType\": \"Boolean\",\n            \"Value\": \"false\"\n        }\n    },\n    \"participants\": {\n        \"240668a7-55aa-4d10-91c4-77058e30fe1b\": {\n            \"type\": \"Participant\",\n            \"email\": \"CN=Davek Valentino/O=ProjectKeep\",\n            \"roles\": {\n                \"owner\": true\n            }\n        },\n        \"aa3bc30d-7d80-4055-b85b-a3f8ba7386f2\": {\n            \"type\": \"Participant\",\n            \"email\": \"CN=Davek Valentino/O=ProjectKeep\",\n            \"roles\": {\n                \"chair\": true\n            }\n        }\n    },\n    \"created\": \"2021-05-25T02:44:28Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/task",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-1869) /pimitem/{uuid} Retrieve task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"uid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"alerts\": {\"type\": \"object\"}",
									"    },",
									"    required: [\"uid\", \"alerts\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"uid\"]).to.equal(pm.environment.get(\"TASK_ID\"), \"UID is not correct\");",
									"    pm.expect(jsonData[\"alerts\"][\"cbbf369a-448d-4577-af5a-09a7cc2f1456\"][\"@type\"]).to.equal(\"Alert\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('TASK_ID')).to.equal(true, \"TASK_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TASK_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/task/{uuid} Delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with TASK_ID",
									"pm.environment.unset(\"TASK_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete task\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/task/{{TASK_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"task",
								"{{TASK_ID}}"
							]
						},
						"description": "Delete task that was created"
					},
					"response": []
				}
			],
			"description": "Contains test against the Keep Contacts API for APIs used by EWS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "MessageFlags",
					"item": [
						{
							"name": "User Login - Authenticate keep server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"pm.test(\"Capture Bearer\", function () {",
											"    pm.response.to.be.json;",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/auth",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "createMimeMessage Create a message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check status 200\", function () {",
											"    pm.expect(jsonData.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"Check for unid\", function () {",
											"    pm.expect(jsonData).to.have.property(\"unid\");",
											"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
											"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "text/base64",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo=",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/mime?send=false",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"mime"
									],
									"query": [
										{
											"key": "send",
											"value": "false"
										}
									]
								},
								"description": "Create a message from mime content"
							},
							"response": []
						},
						{
							"name": "readMessages - Mark the item as read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Unread Off\", function () {",
											"    pm.expect(jsonData[\"Unread Off\"]).to.equal(\"Documents that were marked read: 1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unreadOff\": [\n    \"{{TestMessagesMessageId}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check for read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"        \"@unid\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 32,",
											"            \"maxLength\": 32",
											"        },",
											"        \"@created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastmodified\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastaccessed\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"From\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"Subject\": {",
											"            \"type\": \"string\"",
											"        }",
											"  },",
											"  \"required\": [",
											"        \"@unid\",",
											"        \"@created\",",
											"        \"@lastmodified\",",
											"        \"@lastaccessed\",",
											"        \"Subject\",",
											"        \"From\"",
											"      ]",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    pm.expect(jsonData['@unread']).equal(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"pimitem",
										"{{TestMessagesMessageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unReadMessages - Mark the item as unread",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Unread Off\", function () {",
											"    pm.expect(jsonData[\"Unread On\"]).to.equal(\"Documents that were marked unread: 1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unreadOn\": [\n    \"{{TestMessagesMessageId}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check for unread",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"        \"@unid\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 32,",
											"            \"maxLength\": 32",
											"        },",
											"        \"@created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastmodified\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastaccessed\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"From\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"Subject\": {",
											"            \"type\": \"string\"",
											"        }",
											"  },",
											"  \"required\": [",
											"        \"@unid\",",
											"        \"@created\",",
											"        \"@lastmodified\",",
											"        \"@lastaccessed\",",
											"        \"Subject\",",
											"        \"From\"",
											"      ]",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    pm.expect(jsonData['@unread']).equal(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"pimitem",
										"{{TestMessagesMessageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "followUpOn - TurnOn the quickFlag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Follow Up On\", function () {",
											"    pm.expect(jsonData[\"Quick Flag On\"]).to.equal(\"Documents that were marked for Quick Flag: 1\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"quickFlagOn\": [\n    \"{{TestMessagesMessageId}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "FAILS(LABS-2805) check for followup flag on",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"        \"@unid\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 32,",
											"            \"maxLength\": 32",
											"        },",
											"        \"@created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastmodified\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastaccessed\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"From\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"Subject\": {",
											"            \"type\": \"string\"",
											"        }",
											"  },",
											"  \"required\": [",
											"        \"@unid\",",
											"        \"@created\",",
											"        \"@lastmodified\",",
											"        \"@lastaccessed\",",
											"        \"Subject\",",
											"        \"From\"",
											"      ]",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    pm.expect(jsonData['FollowUpStatus']).equal(\"2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"pimitem",
										"{{TestMessagesMessageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "followUpOff - TurnOff the quickFlag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Follow Up Off\", function () {",
											"    pm.expect(jsonData[\"Quick Flag Off\"]).to.equal(\"Documents that were removed from Quick Flag: 1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"unreadOff\": [\n    \"{{TestMessagesMessageId}}​​​​​​​​\"\n    ], \n\"quickFlagOff\": [\n    \"{{TestMessagesMessageId}}\"\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check for followup flag off",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"        \"@unid\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 32,",
											"            \"maxLength\": 32",
											"        },",
											"        \"@created\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastmodified\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"@lastaccessed\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"From\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"Subject\": {",
											"            \"type\": \"string\"",
											"        }",
											"  },",
											"  \"required\": [",
											"        \"@unid\",",
											"        \"@created\",",
											"        \"@lastmodified\",",
											"        \"@lastaccessed\",",
											"        \"Subject\",",
											"        \"From\"",
											"      ]",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"    pm.expect(jsonData['quickFlagStatus']).to.be.undefined;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"pimitem",
										"{{TestMessagesMessageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteMessage - Delete a message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Check status 200\", function () {",
											"    pm.expect(jsonData.status).to.equal(200);",
											"});",
											"",
											"pm.environment.unset(\"TestMessagesMessageId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"message",
										"{{TestMessagesMessageId}}",
										"mime"
									]
								},
								"description": "Delete a message by id"
							},
							"response": []
						},
						{
							"name": "createMimeMessage - SoftDelete flag on message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check status 200\", function () {",
											"    pm.expect(jsonData.status).to.eql(200);",
											"});",
											"",
											"pm.test(\"Check for unid\", function () {",
											"    pm.expect(jsonData).to.have.property(\"unid\");",
											"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
											"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "text/base64",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo=",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/mime?send=false",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"mime"
									],
									"query": [
										{
											"key": "send",
											"value": "false"
										}
									]
								},
								"description": "Create a message from mime content"
							},
							"response": []
						},
						{
							"name": "softDeleteOn - softDelete the item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Soft Delete On\", function () {",
											"    pm.expect(jsonData[\"Soft Delete On\"]).to.equal(\"Documents that were marked for soft deletion: 1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"softDeleteOn\": [\n    \"{{TestMessagesMessageId}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "trash - Verify item moved to trash",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"array\",",
											"  \"minItems\": 1,",
											"  \"items\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"@unid\": {",
											"          \"type\": \"string\",",
											"          \"minLength\": 32,",
											"          \"maxLength\": 32",
											"        },",
											"      },",
											"      ",
											"      \"required\": [",
											"        \"@unid\",",
											"      ]",
											"  }",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify item moved to trash\", function() {",
											"    var jsonData = JSON.parse(responseBody);",
											"    var found = jsonData.find(message => message[\"@unid\"] === pm.environment.get(\"TestMessagesMessageId\"));",
											"    pm.expect(found).not.undefined;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"url": {
									"raw": "{{PIMHOST}}/trash",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"trash"
									]
								},
								"description": "Get Inbox Messages"
							},
							"response": []
						},
						{
							"name": "softDeleteOff - Restore the item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check for Soft Delete Off\", function () {",
											"    pm.expect(jsonData[\"Soft Delete Off\"]).to.equal(\"Documents that were restored from the trash: 1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"softDeleteOff\": [\n    \"{{TestMessagesMessageId}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PIMHOST}}/messages/",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "trash - Verify item removed from trash",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var schema = {",
											"  \"type\": \"array\",",
											"  \"items\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"@unid\": {",
											"          \"type\": \"string\",",
											"          \"minLength\": 32,",
											"          \"maxLength\": 32",
											"        },",
											"      },",
											"      ",
											"      \"required\": [",
											"        \"@unid\",",
											"      ]",
											"  }",
											"};",
											"",
											"pm.test(\"Verify body schema\", function() {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify item removed from trash\", function() {",
											"    var jsonData = JSON.parse(responseBody);",
											"    var found = jsonData.find(message => message[\"@unid\"] === pm.environment.get(\"TestMessagesMessageId\"));",
											"    pm.expect(found).is.undefined;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"url": {
									"raw": "{{PIMHOST}}/trash",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"trash"
									]
								},
								"description": "Get Inbox Messages"
							},
							"response": []
						},
						{
							"name": "deleteMessage - Item removed from trash",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Check status 200\", function () {",
											"    pm.expect(jsonData.status).to.equal(200);",
											"});",
											"",
											"pm.environment.unset(\"TestMessagesMessageId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AUTH_KEY}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
									"host": [
										"{{PIMHOST}}"
									],
									"path": [
										"message",
										"{{TestMessagesMessageId}}",
										"mime"
									]
								},
								"description": "Delete a message by id"
							},
							"response": []
						}
					]
				},
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"    pm.environment.set(\"AUTH_SUBJECT\", jsonData.claims.sub);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMessage Create a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/html; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"PGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT1zLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmQiDQoJeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0gMDQvMTIvb21tbCIgeG1sbnM9M0QiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MCI+IDxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj0zREM9b250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+DQo8bWV0YSBuYW1lPTNER2VuZXJhdG9yIGNvbnRlbnQ9M0Q9Ik1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj4NCjxzdHlsZT4NCgk8IS0tDQoJLyogRm9udCBEZWZpbml0aW9ucyAqLw0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogIkNhbWJyaWEgTWF0aCI7DQoJCXBhbm9zZS0xOiAyIDQgNSAzIDUgNCA2IDMgMiA0Ow0KCX0NCg0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogQ2FsaWJyaTsNCgkJcGFub3NlLTE6IDIgMTUgNSAyIDIgMiA0IDMgMiA0Ow0KCX0NCg0KCS8qIFN0eWxlIERlZmluaXRpb25zICovDQoJcC5Nc29Ob3JtYWwsDQoJbGkuTXNvTm9ybWFsLA0KCWRpdi5Nc29Ob3JtYWwgew0KCQltYXJnaW46IDBpbjsNCgkJbWFyZ2luLWJvdHRvbTogLjAwMDFwdDsNCgkJZm9udC1zaXplOiAxMS4wcHQ7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJc3Bhbi5FbWFpbFN0eWxlMTcgew0KCQltc28tc3R5bGUtdHlwZTogcGVyc29uYWwtY29tcG9zZTsNCgkJZm9udC1mYW1pbHk6ICJDYWxpYnJpIiwgc2Fucy1zZXJpZjsNCgkJY29sb3I6IHdpbmRvd3RleHQ7DQoJfQ0KDQoJLk1zb0NocERlZmF1bHQgew0KCQltc28tc3R5bGUtdHlwZTogZXhwb3J0LW9ubHk7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJQHBhZ2UgV29yZFNlY3Rpb24xIHsNCgkJc2l6ZTogOC41aW4gMTEuMGluOw0KCQltYXJnaW46IDEuMGluIDEuMGluIDEuMGluIDEuMGluOw0KCX0NCg0KCWRpdi5Xb3JkU2VjdGlvbjEgew0KCQlwYWdlOiBXb3JkU2VjdGlvbjE7DQoJfQ0KCS0tPg0KPC9zdHlsZT4NCjwvaGVhZD4NCg0KPGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+DQoJPGRpdiBjbGFzPXM9M0RXb3JkU2VjdGlvbjE+DQoJCTxwIGNsYXNzPTNETXNvTm9ybWFsPlRoaXMgaXMgYSB0ZXN0IGVtYWlsDQoJCQk8bzpwPjwvbzpwPg0KCQk8L3A+DQoJPC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2872) Items in Drafts returning wrong parent folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        var folderId = jsonData.referenceFolder[0];",
									"        var folderName = utils.getFolderNameById(folderId);",
									"        var expectFolderName = \"Drafts\";",
									"        var expectFolderId = utils.getFolderIdByName(expectFolderName);",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-1793) /message/{unid} Retrieve message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\": \"string\", \"minLength\": 32 },",
									"        \"CopyTo\": { \"type\": \"string\" },",
									"        \"From\": { \"type\": \"string\" },",
									"        \"SendTo\": { \"type\": \"array\" },",
									"        \"Subject\": { \"type\": \"string\" },",
									"        \"AdditionalFields\": { \"type\": \"object\" }",
									"    },",
									"    required: [\"@unid\", \"CopyTo\", \"From\", \"Subject\", \"AdditionalFields\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.Subject).to.equal(\"Sample Email\", \"Subject is not correct\");",
									"});",
									"",
									"pm.test(\"Verify CopyTo, SendTo, From, and BlindCopyTo only contain the email address values\", function () {",
									"    pm.expect(jsonData.CopyTo).to.equal('johndoe@marauders.com', \"CopyTo is not correct\");",
									"    pm.expect(jsonData.SendTo[0]).to.equal('johndoe@marauders.com', \"SendTo is not correct\")",
									"    pm.expect(jsonData.From).to.equal('rj@hcl.com', \"From is not correct\");",
									"    pm.expect(jsonData.BlindCopyTo[0]).to.equal('johndoe@marauders.com', \"From is not correct\");",
									"    pm.expect(jsonData.BlindCopyTo[1]).to.equal('rj@hcl.com', \"From is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} update pimitem message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"},",
									"         \"statusText\": {\"type\": \"string\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\", \"statusText\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"message_ID\"), \"UNID is not correct\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/html; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"PGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT1zLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmQiDQoJeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0gMDQvMTIvb21tbCIgeG1sbnM9M0QiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MCI+IDxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj0zREM9b250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+DQo8bWV0YSBuYW1lPTNER2VuZXJhdG9yIGNvbnRlbnQ9M0Q9Ik1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj4NCjxzdHlsZT4NCgk8IS0tDQoJLyogRm9udCBEZWZpbml0aW9ucyAqLw0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogIkNhbWJyaWEgTWF0aCI7DQoJCXBhbm9zZS0xOiAyIDQgNSAzIDUgNCA2IDMgMiA0Ow0KCX0NCg0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogQ2FsaWJyaTsNCgkJcGFub3NlLTE6IDIgMTUgNSAyIDIgMiA0IDMgMiA0Ow0KCX0NCg0KCS8qIFN0eWxlIERlZmluaXRpb25zICovDQoJcC5Nc29Ob3JtYWwsDQoJbGkuTXNvTm9ybWFsLA0KCWRpdi5Nc29Ob3JtYWwgew0KCQltYXJnaW46IDBpbjsNCgkJbWFyZ2luLWJvdHRvbTogLjAwMDFwdDsNCgkJZm9udC1zaXplOiAxMS4wcHQ7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJc3Bhbi5FbWFpbFN0eWxlMTcgew0KCQltc28tc3R5bGUtdHlwZTogcGVyc29uYWwtY29tcG9zZTsNCgkJZm9udC1mYW1pbHk6ICJDYWxpYnJpIiwgc2Fucy1zZXJpZjsNCgkJY29sb3I6IHdpbmRvd3RleHQ7DQoJfQ0KDQoJLk1zb0NocERlZmF1bHQgew0KCQltc28tc3R5bGUtdHlwZTogZXhwb3J0LW9ubHk7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJQHBhZ2UgV29yZFNlY3Rpb24xIHsNCgkJc2l6ZTogOC41aW4gMTEuMGluOw0KCQltYXJnaW46IDEuMGluIDEuMGluIDEuMGluIDEuMGluOw0KCX0NCg0KCWRpdi5Xb3JkU2VjdGlvbjEgew0KCQlwYWdlOiBXb3JkU2VjdGlvbjE7DQoJfQ0KCS0tPg0KPC9zdHlsZT4NCjwvaGVhZD4NCg0KPGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+DQoJPGRpdiBjbGFzPXM9M0RXb3JkU2VjdGlvbjE+DQoJCTxwIGNsYXNzPTNETXNvTm9ybWFsPlRoaXMgaXMgYSB0ZXN0IGVtYWlsDQoJCQk8bzpwPjwvbzpwPg0KCQk8L3A+DQoJPC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email updated\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} Retrieve  pimitem message after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\": \"string\", \"minLength\": 32 },",
									"        \"CopyTo\": { \"type\": \"array\" },",
									"        \"From\": { \"type\": \"string\" },",
									"        \"SendTo\": { \"type\": \"array\" },",
									"        \"Subject\": { \"type\": \"string\" },",
									"        \"AdditionalFields\": { \"type\": \"object\" }",
									"    },",
									"    required: [\"@unid\", \"CopyTo\", \"From\", \"Subject\", \"AdditionalFields\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.CopyTo[0]).to.equal('John Doe <johndoe@marauders.com>', \"CopyTo is not correct\");",
									"    pm.expect(jsonData.SendTo[0]).to.equal('\\\"John Doe\\\" <johndoe@marauders.com>', \"SendTo is not correct\")",
									"    pm.expect(jsonData.From).to.equal('RJ Jesus <rj@hcl.com>', \"From is not correct\");",
									"    pm.expect(jsonData.Subject).to.equal(\"Sample Email updated\", \"Subject is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-3025) /message/{unid} update pimitem message with new Subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Subject\": \"Email updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-3025) /pimitem/{unid} Retrieve  pimitem message after update Subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\": \"string\", \"minLength\": 32 },",
									"        \"Subject\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"@unid\", \"Subject\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.Subject).to.equal(\"Email updated\", \"Subject is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/message/{uuid} Delete message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with message_ID",
									"pm.environment.unset(\"message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete message\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Hard delete message that was created"
					},
					"response": []
				},
				{
					"name": "createMimeMessage Create a message for inbox and sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
									"    pm.environment.unset('BASE64_MESSAGE');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const from = pm.environment.get('AUTH_SUBJECT');",
									"const to = pm.environment.get('AUTH_SUBJECT');",
									"const message = `Subject: Keep Acceptance Test message\\r\\n\\Mime-Version: 1.0 (Mac OS X Mail 13.4 \\(3608.120.23.2.4\\))\\r\\nContent-Type: text/html;\\r\\n\tcharset=us-ascii\\r\\nX-Apple-Auto-Saved: 1\\r\\nX-Apple-Base-Url: x-msg://5/\\r\\nX-Apple-Mail-Remote-Attachments: NO\\r\\nFrom: ${from}\\r\\nX-Universally-Unique-Identifier: 528A7BA8-49C3-4935-92F1-D6CF5E749516\\r\\nX-Apple-Windows-Friendly: 1\\r\\nDate: Mon, 29 Mar 2021 17:54:50 -0400\\r\\nX-Apple-Mail-Signature: \\r\\nContent-Transfer-Encoding: 7bit\\r\\nMessage-Id: <1DBB2965-BF87-42C8-BA02-B0117FB744F8@miramare.projectkeep.io>\\r\\nX-Uniform-Type-Identifier: com.apple.mail-draft\\r\\nTo: ${to}\\r\\n\\r\\n\\<html><head></head><body dir=\"auto\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;\">I am regression testing Keep APIs.&nbsp;</body></html>\\r\\n`;",
									"const base64String = Buffer.from(message).toString('base64');",
									"pm.environment.set('BASE64_MESSAGE', base64String);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{BASE64_MESSAGE}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime?send=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "true"
								}
							]
						},
						"description": "Create a message from mime content. Send is set to true so the message will show up in the sent folder as well as the inbox."
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2881) Items in Sent returning wrong parent folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        var folderId = jsonData.referenceFolder[0];",
									"        var folderName = utils.getFolderNameById(folderId);",
									"        var expectFolderName = \"Sent\";",
									"        var expectFolderId = utils.getFolderIdByName(expectFolderName);               ",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inbox primitive: retrieve inbox messages in primitive format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$86\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$Importance\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"SametimeInfo\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$93\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$98\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$73\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$70\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$73\",",
									"        \"$70\",",
									"      ]",
									"  }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/inbox",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"inbox"
							]
						},
						"description": "Get Inbox Messages"
					},
					"response": []
				},
				{
					"name": "Inbox documents: Retrieve inbox messages as document format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"uid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"          \"type\": \"string\"",
									"        }",
									"      }",
									"  }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/inbox?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"inbox"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Retrieve inbox messages as document format"
					},
					"response": []
				},
				{
					"name": "Sent Primitive: Retrieve sent messages in primitive format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$65\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$62\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$65\",",
									"        \"$62\"",
									"      ]",
									"  }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/sent",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"sent"
							]
						},
						"description": "Get messages from the sent folder in primitive format"
					},
					"response": []
				},
				{
					"name": "Sent documents: Retrieve sent messages as document format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"@created\",",
									"        \"@lastmodified\",",
									"        \"@lastaccessed\",",
									"        \"Subject\",",
									"        \"From\"",
									"      ]",
									"  }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/sent?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"sent"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Retrieve sent messages as document format"
					},
					"response": []
				},
				{
					"name": "deleteMessage Delete a message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesMessageId\");",
									"pm.environment.unset(\"TestMessagesMimeContent\");",
									"pm.environment.unset(\"TestMessagesViewName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Gather sent messages from inbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$86\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$Importance\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"SametimeInfo\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$93\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$98\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$73\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$70\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$73\",",
									"        \"$70\",",
									"      ]",
									"  }",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Gather messages\", function() {",
									"    const toDelete = [];",
									"    jsonData.forEach(message => {",
									"        if (message['$73'] === \"Keep Acceptance Test message\") {",
									"            toDelete.push(message['@unid']);",
									"        }",
									"    });",
									"",
									"    if (toDelete.length === 0) {",
									"        postman.setNextRequest('Get Junk Mail folder id');",
									"    }",
									"    else {",
									"        pm.environment.set('messagesToDelete', toDelete);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/inbox",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"inbox"
							]
						},
						"description": "Get Inbox Messages"
					},
					"response": []
				},
				{
					"name": "Delete inbox messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify deletions\", function() {",
									"    pm.expect(jsonData[\"Soft Delete On\"]).to.be.equal(`Documents that were marked for soft deletion: ${pm.environment.get('messagesToDelete').length}`);",
									"",
									"    pm.environment.unset('messagesToDelete');",
									"    pm.environment.unset('messagesToDeleteString');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.get('messagesToDelete'), 'Messages to delete not set').to.not.be.undefined;",
									"pm.environment.set('messagesToDeleteString', JSON.stringify(pm.environment.get('messagesToDelete')))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"softDeleteOn\": {{messagesToDeleteString}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Junk Mail folder id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"    }],",
									"    \"minItems\": 10",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check for roots folders\", function () {",
									"    var expectedViews = [\"($All)\", \"($Calendar)\", \"($Inbox)\", \"($Journal)\", \"($JunkMail)\", \"($SoftDeletions)\", \"($ToDo)\", \"($Drafts)\", \"($Sent)\" ];",
									"    jsonData.forEach(folder => {",
									"        if (folder.View === '($JunkMail)') {",
									"            pm.environment.set('JunkMail_FolderId', folder.FolderId);",
									"        }",
									"    });",
									"    var folders = jsonData.filter(folder => {",
									"        return expectedViews.includes(folder.View);",
									"    });",
									"    pm.expect(folders.length).to.equal(expectedViews.length);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMimeMessage Create a message for drafts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
									"    pm.environment.unset('BASE64_MESSAGE');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const from = pm.environment.get('AUTH_SUBJECT');",
									"const to = pm.environment.get('AUTH_SUBJECT');",
									"const message = `Subject: Keep Acceptance Test message\\r\\n\\Mime-Version: 1.0 (Mac OS X Mail 13.4 \\(3608.120.23.2.4\\))\\r\\nContent-Type: text/html;\\r\\n\tcharset=us-ascii\\r\\nX-Apple-Auto-Saved: 1\\r\\nX-Apple-Base-Url: x-msg://5/\\r\\nX-Apple-Mail-Remote-Attachments: NO\\r\\nFrom: ${from}\\r\\nX-Universally-Unique-Identifier: 528A7BA8-49C3-4935-92F1-D6CF5E749516\\r\\nX-Apple-Windows-Friendly: 1\\r\\nDate: Mon, 29 Mar 2021 17:54:50 -0400\\r\\nX-Apple-Mail-Signature: \\r\\nContent-Transfer-Encoding: 7bit\\r\\nMessage-Id: <1DBB2965-BF87-42C8-BA02-B0117FB744F8@miramare.projectkeep.io>\\r\\nX-Uniform-Type-Identifier: com.apple.mail-draft\\r\\nTo: ${to}\\r\\n\\r\\n\\<html><head></head><body dir=\"auto\" style=\"word-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;\">I am regression testing Keep APIs.&nbsp;</body></html>\\r\\n`;",
									"const base64String = Buffer.from(message).toString('base64');",
									"pm.environment.set('BASE64_MESSAGE', base64String);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/base64"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{BASE64_MESSAGE}}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime?send=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "false"
								}
							]
						},
						"description": "Create a message from mime content. Send is set to true so the message will show up in the sent folder as well as the inbox."
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2881) Items in Drafts returning wrong parent folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        var folderId = jsonData.referenceFolder[0];",
									"        var folderName = utils.getFolderNameById(folderId);",
									"        var expectFolderName = \"Drafts\";",
									"        var expectFolderId = utils.getFolderIdByName(expectFolderName);",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Copy messages to Junk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Add Status\", function () {",
									"    pm.expect(jsonData[\"Add Status\"]).to.include(\"Successful addition\");",
									"});",
									"",
									"pm.test(\"Check for added ids\", function () {",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"message\"]).to.include(\"add successful\");",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TestMessagesMessageId\"));",
									"",
									"    pm.environment.unset('JunkMail_FolderId');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.get('JunkMail_FolderId')).to.not.be.undefined;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\"{{TestMessagesMessageId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{JunkMail_FolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{JunkMail_FolderId}}"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "Junk Primitive: Retrieve junk email messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$70\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$70\",",
									"      ]",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/junk",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"junk"
							]
						},
						"description": "Get messages from the junk email folder in primitive format."
					},
					"response": []
				},
				{
					"name": "Junk documents: Retrieve junk email messages as document format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"@created\",",
									"        \"@lastmodified\",",
									"        \"@lastaccessed\",",
									"        \"Subject\",",
									"        \"From\"",
									"      ]",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/junk?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"junk"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Retrieve junk email messages as document format"
					},
					"response": []
				},
				{
					"name": "Drafts Primitive: Retrieve messages from the drafts folder in primitive format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$55\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"$66\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$55\",",
									"        \"$66\"",
									"      ]",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/drafts",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"drafts"
							]
						},
						"description": "Get messages from the drafts folder in primitive format"
					},
					"response": []
				},
				{
					"name": "Draft documents: Retrieve draft email messages as document format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"uid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"          \"type\": \"string\"",
									"        }",
									"      }",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/drafts?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"drafts"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Retrieve draft messages as document format"
					},
					"response": []
				},
				{
					"name": "deleteMessage Delete message in drafts and junk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesMessageId\");",
									"pm.environment.unset(\"TestMessagesMimeContent\");",
									"pm.environment.unset(\"TestMessagesViewName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Trash Primitive: Retrieve messages from the trash folder in primitive format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$68\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$68\"",
									"      ]",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							]
						},
						"description": "Get messages from the trash folder in primitive format"
					},
					"response": []
				},
				{
					"name": "Trash documents: Retrieve messages from the trash folder in documents format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"uid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"          \"type\": \"string\"",
									"        }",
									"      }",
									"  };",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Get messages from the trash folder in documents format"
					},
					"response": []
				},
				{
					"name": "Create CopyItems Folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"let schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(pm.environment.get(\"TestFolderViewName\"));",
									"",
									"    pm.environment.set(\"CopyItemsFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"TestFolderViewName\", \"CopyItems\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"{{TestFolderViewName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Create the TestMessage folder for subsequent tests."
					},
					"response": []
				},
				{
					"name": "createMimeMessage Create a message from Mime conten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"",
									"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo=",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime?send=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "true"
								}
							]
						},
						"description": "Create a message from mime content"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-3079) GET /pimitem for message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        let folderId = jsonData.referenceFolder[0];",
									"        let folderName = utils.getFolderNameById(folderId);",
									"        let expectFolderName = \"Sent\";",
									"        let expectFolderId = utils.getFolderIdByName(expectFolderName);",
									"",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TestMessagesMessageId}}"
							]
						},
						"description": "Verify the message will be added to the Sent view"
					},
					"response": []
				},
				{
					"name": "moveMessages Move messages from one folder to another Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for moveids\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TestMessagesMessageId\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{TestMessagesMessageId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{CopyItemsFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{CopyItemsFolderId}}"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "GET /pimitem for message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"let schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        let folderId = jsonData.referenceFolder[0];",
									"        let expectFolderId = pm.environment.get(\"CopyItemsFolderId\");",
									"",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TestMessagesMessageId}}"
							]
						},
						"description": "Verify correct referenceFolder after the message was moved into another folder"
					},
					"response": []
				},
				{
					"name": "deleteMessage Delete a message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesMessageId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{TestMessagesMessageId}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Delete CopyItems folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var FolderId = pm.environment.get(\"CopyItemsFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"CopyItemsFolderId\");",
									"pm.environment.unset(\"TestFolderViewName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{CopyItemsFolderId}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{CopyItemsFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TestMessages Folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(pm.environment.get(\"TestMessagesViewName\"));",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"TestMessagesFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"TestMessagesViewName\", \"TestMessages\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"{{TestMessagesViewName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Create the TestMessage folder for subsequent tests."
					},
					"response": []
				},
				{
					"name": "createMimeMessage Create a message from Mime content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo=",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime?send=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "false"
								}
							]
						},
						"description": "Create a message from mime content"
					},
					"response": []
				},
				{
					"name": "GET /pimitem for message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"        \"@unid\": {",
									"            \"type\": \"string\",",
									"            \"minLength\": 32,",
									"            \"maxLength\": 32",
									"        },",
									"        \"@created\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"@lastmodified\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"@lastaccessed\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"From\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"Subject\": {",
									"            \"type\": \"string\"",
									"        }",
									"  },",
									"  \"required\": [",
									"        \"@unid\",",
									"        \"@created\",",
									"        \"@lastmodified\",",
									"        \"@lastaccessed\",",
									"        \"Subject\",",
									"        \"From\"",
									"      ]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.environment.set(\"testThreadId\", jsonData['@unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TestMessagesMessageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getMimeMessage Get a message in mime format from id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is present\", function () {",
									"    pm.expect(pm.response.text().length > 0).to.be.true;",
									"    pm.environment.set(\"TestMessagesMimeContent\", pm.response.text());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Accept",
								"value": "text/base64",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime?allowchunked=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							],
							"query": [
								{
									"key": "allowchunked",
									"value": "false"
								}
							]
						},
						"description": "Get a message in mime format from id"
					},
					"response": []
				},
				{
					"name": "updateMimeMessage Update a message from Mime content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"TestMessagesMessageId\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo="
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime?send=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "false"
								}
							]
						},
						"description": "Get Inbox Messages"
					},
					"response": []
				},
				{
					"name": "get thread",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"// This runtests check needs to be removed when LABS-1134 is fixed.  Also the \"GET /pimitem for message\" test should set the environment variable for testThreadId to the threadid from the message, not the @unid",
									"runtests = false;",
									"if (runtests) {",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check statusCode 200\", function () {",
									"    pm.expect(jsonData.statusCode).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.unid).to.eql(pm.environment.get(\"testThreadId\"));",
									"    pm.environment.unset(\"testThreadId\");",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/thread/{{testThreadId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"thread",
								"{{testThreadId}}"
							]
						},
						"description": "Get Inbox Messages"
					},
					"response": []
				},
				{
					"name": "moveMessages Move messages from one folder to another",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for moveids\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TestMessagesMessageId\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{TestMessagesMessageId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{TestMessagesFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{TestMessagesFolderId}}"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "/messages/labelid Retrieve messages in a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"@unid\": {",
									"            \"type\": \"string\",",
									"            \"minLength\": 32,",
									"            \"maxLength\": 32",
									"          },",
									"          \"@created\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"@lastmodified\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"@lastaccessed\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"From\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"@unid\",",
									"          \"@created\",",
									"          \"@lastmodified\",",
									"          \"@lastaccessed\",",
									"          \"From\"",
									"        ]",
									"  };",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": itemType",
									"  };",
									"",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/messages/{{TestMessagesViewName}}?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{TestMessagesViewName}}"
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						},
						"description": "Retrieve messages from a named folder"
					},
					"response": []
				},
				{
					"name": "deleteMessage Delete a message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesMimeContent\");",
									"pm.environment.unset(\"TestMessagesViewName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestMessagesMessageId}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestMessagesMessageId}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{TestMessagesMessageId}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Verify message is not in trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var itemType = {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"@unid\": {",
									"          \"type\": \"string\",",
									"          \"minLength\": 32,",
									"          \"maxLength\": 32",
									"        },",
									"        \"$68\": {",
									"          \"type\": \"string\"",
									"        },",
									"      },",
									"      \"required\": [",
									"        \"@unid\",",
									"        \"$68\"",
									"      ]",
									"};",
									"",
									"var schema;",
									"if (Array.isArray(jsonData)) {",
									"  schema = {",
									"    \"type\": \"array\",",
									"    \"items\": itemType",
									"  };",
									"} else {",
									"  schema = itemType;",
									"}",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify document deleted\", function() {",
									"    const unid = pm.environment.get(\"TestMessagesMessageId\");",
									"    const found = jsonData.find(message => message[\"@unid\"] === unid);",
									"    pm.expect(found).to.be.undefined;",
									"",
									"    pm.environment.unset(\"TestMessagesMessageId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Verify messages is not in trash');",
									"pm.expect(pm.environment.get('TestMessagesMessageId')).to.not.be.undefined;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							]
						},
						"description": "Get messages from the trash folder in primitive format"
					},
					"response": []
				},
				{
					"name": "Delete TestMessages folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var FolderId = pm.environment.get(\"TestMessagesFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesFolderId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{TestMessagesFolderId}}?documentdeletion=NONE",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{TestMessagesFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createMimeMessage Create a message from Mime content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for unid\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.environment.set(\"TestMessagesMessageId\", jsonData.unid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "text/base64",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "VXNlci1BZ2VudDogTWljcm9zb2Z0LU1hY091dGxvb2svMTYuMzguMjAwNjE0MDENCkRhdGU6IEZyaSwgMTAgSnVsIDIwMjAgMTE6NDk6MjIgLTA0MDANClN1YmplY3Q6IEhpDQpGcm9tOiAiam9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvIiA8am9obi5kb2VAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVG86IERhdmlkIEtlbm5lZHkgPGRhdmlkLmtlbm5lZHlAaGNsLmNvbT4NCk1lc3NhZ2UtSUQ6IDw3RDhCNjRBOC05QkI1LTQ5M0MtOTk1Mi0yQzFERTg4NkY4MjRAMjdlODMzNWFiYmQzLm5ncm9rLmlvPg0KVGhyZWFkLVRvcGljOiBIaQ0KTWltZS12ZXJzaW9uOiAxLjANCkNvbnRlbnQtdHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KCWJvdW5kYXJ5PSJCXzM2NzcyMjY1NjJfMTc5MTg3MzAyNCINCg0KPiBUaGlzIG1lc3NhZ2UgaXMgaW4gTUlNRSBmb3JtYXQuIFNpbmNlIHlvdXIgbWFpbCByZWFkZXIgZG9lcyBub3QgdW5kZXJzdGFuZA0KdGhpcyBmb3JtYXQsIHNvbWUgb3IgYWxsIG9mIHRoaXMgbWVzc2FnZSBtYXkgbm90IGJlIGxlZ2libGUuDQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQNCkNvbnRlbnQtdHlwZTogdGV4dC9wbGFpbjsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IDdiaXQNCg0KSGVsbG8gVGFueWENCg0KDQotLUJfMzY3NzIyNjU2Ml8xNzkxODczMDI0DQpDb250ZW50LXR5cGU6IHRleHQvaHRtbDsNCgljaGFyc2V0PSJVVEYtOCINCkNvbnRlbnQtdHJhbnNmZXItZW5jb2Rpbmc6IHF1b3RlZC1wcmludGFibGUNCg0KPGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT0NCnMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0NCjA0LzEyL29tbWwiIHhtbG5zPTNEImh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAiPjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9M0RDPQ0Kb250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+PG1ldGEgbmFtZT0zREdlbmVyYXRvciBjb250ZW50PTNEPQ0KIk1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj48c3R5bGU+PCEtLQ0KLyogRm9udCBEZWZpbml0aW9ucyAqLw0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiQ2FtYnJpYSBNYXRoIjsNCglwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6Q2FsaWJyaTsNCglwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9DQovKiBTdHlsZSBEZWZpbml0aW9ucyAqLw0KcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6MTEuMHB0Ow0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uRW1haWxTdHlsZTE3DQoJe21zby1zdHlsZS10eXBlOnBlcnNvbmFsLWNvbXBvc2U7DQoJZm9udC1mYW1pbHk6IkNhbGlicmkiLHNhbnMtc2VyaWY7DQoJY29sb3I6d2luZG93dGV4dDt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUtdHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpAcGFnZSBXb3JkU2VjdGlvbjENCgl7c2l6ZTo4LjVpbiAxMS4waW47DQoJbWFyZ2luOjEuMGluIDEuMGluIDEuMGluIDEuMGluO30NCmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48L2hlYWQ+PGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+PGRpdiBjbGFzPQ0Kcz0zRFdvcmRTZWN0aW9uMT48cCBjbGFzcz0zRE1zb05vcm1hbD5IZWxsbyBUYW55YTxvOnA+PC9vOnA+PC9wPjwvZGl2PjwvYm9keT48L2g9DQp0bWw+DQoNCi0tQl8zNjc3MjI2NTYyXzE3OTE4NzMwMjQtLQ0KDQo=",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/mime?send=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"mime"
							],
							"query": [
								{
									"key": "send",
									"value": "false"
								}
							]
						},
						"description": "Create a message from mime content"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-3079) GET /pimitem for message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        let folderId = jsonData.referenceFolder[0];",
									"        let folderName = utils.getFolderNameById(folderId);",
									"        let expectFolderName = \"Drafts\";",
									"        let expectFolderId = utils.getFolderIdByName(expectFolderName);  ",
									"",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"TestMessagesViewName\", \"TestMessages\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TestMessagesMessageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "moveMessages Move messages to inbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for moveids\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"TestMessagesMessageId\"));",
									"});",
									"",
									"pm.environment.unset(\"TestMessagesFolderId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let inboxFolderId = utils.getFolderIdByName(\"Inbox\");",
									"",
									"pm.environment.set(\"TestMessagesFolderId\", inboxFolderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{TestMessagesMessageId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{TestMessagesFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{TestMessagesFolderId}}"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "GET /pimitem for message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"referenceFolder\": { \"type\": \"array\"}",
									"    },",
									"    required: [\"referenceFolder\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.referenceFolder.length).to.be.above(0);",
									"    ",
									"    if(jsonData.referenceFolder.length){",
									"        let folderId = jsonData.referenceFolder[0];",
									"        let folderName = utils.getFolderNameById(folderId);",
									"        let expectFolderName = \"Inbox\";",
									"        let expectFolderId = utils.getFolderIdByName(expectFolderName);  ",
									"",
									"        pm.expect(folderId).to.equal(expectFolderId);",
									"        pm.expect(folderName).to.equal(expectFolderName);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{TestMessagesMessageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{TestMessagesMessageId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{TestMessagesMessageId}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "createMessage Create a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/html; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"PGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT1zLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmQiDQoJeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0gMDQvMTIvb21tbCIgeG1sbnM9M0QiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MCI+IDxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj0zREM9b250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+DQo8bWV0YSBuYW1lPTNER2VuZXJhdG9yIGNvbnRlbnQ9M0Q9Ik1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj4NCjxzdHlsZT4NCgk8IS0tDQoJLyogRm9udCBEZWZpbml0aW9ucyAqLw0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogIkNhbWJyaWEgTWF0aCI7DQoJCXBhbm9zZS0xOiAyIDQgNSAzIDUgNCA2IDMgMiA0Ow0KCX0NCg0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogQ2FsaWJyaTsNCgkJcGFub3NlLTE6IDIgMTUgNSAyIDIgMiA0IDMgMiA0Ow0KCX0NCg0KCS8qIFN0eWxlIERlZmluaXRpb25zICovDQoJcC5Nc29Ob3JtYWwsDQoJbGkuTXNvTm9ybWFsLA0KCWRpdi5Nc29Ob3JtYWwgew0KCQltYXJnaW46IDBpbjsNCgkJbWFyZ2luLWJvdHRvbTogLjAwMDFwdDsNCgkJZm9udC1zaXplOiAxMS4wcHQ7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJc3Bhbi5FbWFpbFN0eWxlMTcgew0KCQltc28tc3R5bGUtdHlwZTogcGVyc29uYWwtY29tcG9zZTsNCgkJZm9udC1mYW1pbHk6ICJDYWxpYnJpIiwgc2Fucy1zZXJpZjsNCgkJY29sb3I6IHdpbmRvd3RleHQ7DQoJfQ0KDQoJLk1zb0NocERlZmF1bHQgew0KCQltc28tc3R5bGUtdHlwZTogZXhwb3J0LW9ubHk7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJQHBhZ2UgV29yZFNlY3Rpb24xIHsNCgkJc2l6ZTogOC41aW4gMTEuMGluOw0KCQltYXJnaW46IDEuMGluIDEuMGluIDEuMGluIDEuMGluOw0KCX0NCg0KCWRpdi5Xb3JkU2VjdGlvbjEgew0KCQlwYWdlOiBXb3JkU2VjdGlvbjE7DQoJfQ0KCS0tPg0KPC9zdHlsZT4NCjwvaGVhZD4NCg0KPGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+DQoJPGRpdiBjbGFzPXM9M0RXb3JkU2VjdGlvbjE+DQoJCTxwIGNsYXNzPTNETXNvTm9ybWFsPlRoaXMgaXMgYSB0ZXN0IGVtYWlsDQoJCQk8bzpwPjwvbzpwPg0KCQk8L3A+DQoJPC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} Retrieve  pimitem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData[\"@unread\"]).to.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} update pimitem message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"},",
									"         \"statusText\": {\"type\": \"string\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\", \"statusText\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"message_ID\"), \"UNID is not correct\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AdditionalFields\": {\n        \"FieldA\": \"nothing\",\n        \"FieldB\": \"nothing2\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-2801) /pimitem/{unid} Retrieve  pimitem message after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData[\"@unread\"]).to.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/message/{uuid} Delete message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with message_ID",
									"pm.environment.unset(\"message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete message\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Hard delete message that was created"
					},
					"response": []
				},
				{
					"name": "createMessage Create a message with HTML content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/html; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"PGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT1zLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmQiDQoJeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0gMDQvMTIvb21tbCIgeG1sbnM9M0QiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MCI+IDxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj0zREM9b250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+DQo8bWV0YSBuYW1lPTNER2VuZXJhdG9yIGNvbnRlbnQ9M0Q9Ik1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj4NCjxzdHlsZT4NCgk8IS0tDQoJLyogRm9udCBEZWZpbml0aW9ucyAqLw0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogIkNhbWJyaWEgTWF0aCI7DQoJCXBhbm9zZS0xOiAyIDQgNSAzIDUgNCA2IDMgMiA0Ow0KCX0NCg0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogQ2FsaWJyaTsNCgkJcGFub3NlLTE6IDIgMTUgNSAyIDIgMiA0IDMgMiA0Ow0KCX0NCg0KCS8qIFN0eWxlIERlZmluaXRpb25zICovDQoJcC5Nc29Ob3JtYWwsDQoJbGkuTXNvTm9ybWFsLA0KCWRpdi5Nc29Ob3JtYWwgew0KCQltYXJnaW46IDBpbjsNCgkJbWFyZ2luLWJvdHRvbTogLjAwMDFwdDsNCgkJZm9udC1zaXplOiAxMS4wcHQ7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJc3Bhbi5FbWFpbFN0eWxlMTcgew0KCQltc28tc3R5bGUtdHlwZTogcGVyc29uYWwtY29tcG9zZTsNCgkJZm9udC1mYW1pbHk6ICJDYWxpYnJpIiwgc2Fucy1zZXJpZjsNCgkJY29sb3I6IHdpbmRvd3RleHQ7DQoJfQ0KDQoJLk1zb0NocERlZmF1bHQgew0KCQltc28tc3R5bGUtdHlwZTogZXhwb3J0LW9ubHk7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJQHBhZ2UgV29yZFNlY3Rpb24xIHsNCgkJc2l6ZTogOC41aW4gMTEuMGluOw0KCQltYXJnaW46IDEuMGluIDEuMGluIDEuMGluIDEuMGluOw0KCX0NCg0KCWRpdi5Xb3JkU2VjdGlvbjEgew0KCQlwYWdlOiBXb3JkU2VjdGlvbjE7DQoJfQ0KCS0tPg0KPC9zdHlsZT4NCjwvaGVhZD4NCg0KPGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+DQoJPGRpdiBjbGFzPXM9M0RXb3JkU2VjdGlvbjE+DQoJCTxwIGNsYXNzPTNETXNvTm9ybWFsPlRoaXMgaXMgYSB0ZXN0IGVtYWlsDQoJCQk8bzpwPjwvbzpwPg0KCQk8L3A+DQoJPC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2496) /message/{unid} Retrieve message with HTML content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.bodyType).to.equal(\"text/html\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2496) /pimitem/{unid} Retrieve pimitem message with HTML content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.bodyType).to.equal(\"text/html\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "createMessage Create a message with plain content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/plain; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"VGhpcyBpcyBhIHBsYWluIHRleHQgYm9keS4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2496) /message/{unid} Retrieve message with plain content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.bodyType).to.equal(\"text/plain\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2496) /pimitem/{unid} Retrieve pimitem message with plain content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.bodyType).to.equal(\"text/plain\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "createMessage Create a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/plain; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"VGhpcyBpcyBhIHBsYWluIHRleHQgYm9keS4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "Mark the message as read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"unreadOff\": [\n        \"{{message_ID}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} Retrieve pimitem message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData[\"@unread\"]).to.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}"
							]
						},
						"description": "Verify the message was read"
					},
					"response": []
				},
				{
					"name": "Copy the message to the junk folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const unid = jsonData[\"copiedIds\"][\"0\"][\"unid\"];",
									"",
									"pm.environment.set(\"copied_message_ID\", unid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const junkMailFolderId = utils.getFolderIdByName(\"JunkMail\");",
									"",
									"pm.environment.set(\"JunkMailFolderId\", junkMailFolderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"copy\": [\n        \"{{message_ID}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{JunkMailFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{JunkMailFolderId}}"
							]
						},
						"description": "Move messages from one folder to another"
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-2759) /pimitem/{unid} Retrieve pimitem message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"copied_message_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData[\"@unread\"]).to.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('copied_message_ID')).to.equal(true, \"copied_message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/message/{{copied_message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{copied_message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Permanently delete a message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"message_ID\");",
									"pm.environment.unset(\"JunkMailFolderId\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Permanently delete the copied message from the trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"copied_message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Permanently delete a message from the trash');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash/{{copied_message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{copied_message_ID}}"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "createMessage Create a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.eql(200);",
									"});",
									"",
									"pm.test(\"Check for values\", function () {",
									"    pm.expect(jsonData).to.have.property(\"unid\");",
									"    pm.expect(jsonData.unid).to.have.lengthOf(32);",
									"    pm.expect(jsonData.statusText).to.be.equal(\"OK\")",
									"});",
									"",
									"pm.test(\"Capture message unid\", function () {",
									"    pm.environment.set(\"message_ID\",jsonData['unid']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bccto\": [\n    \"johndoe@marauders.com\",\n    \"rj@hcl.com\"\n  ],\n  \"body\": {\n    \"content-type\": \"text/plain; charset=utf-8\",\n    \"encoding\": \"Base64\",\n    \"message\": \"VGhpcyBpcyBhIHBsYWluIHRleHQgYm9keS4=\"\n  },\n  \"copyto\": [\n    \"John Doe <johndoe@marauders.com>\"\n  ],\n  \"from\": \"RJ De Jesus <rj@hcl.com>\",\n  \"priority\": 1,\n  \"subject\": \"Sample Email\",\n  \"to\": [\n    \"John Doe <johndoe@marauders.com>\",\n    \"RJ De Jesus <rj@hcl.com>\"\n  ],\n  \"AdditionalFields\": {\n    \"Something\": \"nothing\",\n    \"Something2\": \"nothing2\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/message",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message"
							]
						},
						"description": "Create a message"
					},
					"response": []
				},
				{
					"name": "deleteMessage Delete a message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{message_ID}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{message_ID}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Trash Primitive: Retrieve messages from the trash folder in primitive format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify message_ID was contained in trash\", function() {",
									"    const unid = pm.environment.get(\"message_ID\");",
									"    const isUnidInTrash = jsonData.some(message => message[\"@unid\"] === unid);",
									"",
									"    pm.expect(isUnidInTrash).to.equal(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							]
						},
						"description": "Get messages from the trash folder in primitive format"
					},
					"response": []
				},
				{
					"name": "/pimitem/{unid} update pimitem message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"message\": { \"type\":\"string\"},",
									"         \"status\": { \"type\":\"number\"},",
									"         \"statusText\": {\"type\": \"string\"}",
									"    },",
									"    required: [\"unid\", \"message\", \"status\", \"statusText\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"message_ID\"), \"UNID is not correct\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('message_ID')).to.equal(true, \"message_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AdditionalFields\": {\n        \"key1\": \"update-value1\",\n        \"key2\": \"update-value2\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{message_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS(LABS-2774) Trash Primitive: Retrieve messages from the trash folder after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify message_ID was contained in trash\", function() {",
									"    const unid = pm.environment.get(\"message_ID\");",
									"    const isUnidInTrash = jsonData.some(message => message[\"@unid\"] === unid);",
									"",
									"    pm.expect(isUnidInTrash).to.equal(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/trash",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							]
						},
						"description": "Get messages from the trash folder in primitive format"
					},
					"response": []
				},
				{
					"name": "/message/{uuid} Delete message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with message_ID",
									"pm.environment.unset(\"message_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete message\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash/{{message_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash",
								"{{message_ID}}"
							]
						},
						"description": "Hard delete message that was created"
					},
					"response": []
				}
			]
		},
		{
			"name": "Notebook",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Retrieve list of journal entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minLength\": 0,",
									"    \"maxLength\": 0,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$116\": { \"type\":\"string\", \"format\": \"date-time\"  },",
									"         \"$44\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"$52\": { \"type\":\"string\" },",
									"         \"Body\": { \"type\":\"string\" },",
									"         \"Categories\": { \"type\":\"string\" },",
									"         \"$PublicAccess\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"@unid\", \"$116\", \"$44\", \"$52\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Create an note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Body\": \"SSBhbSB0aGUgYm9keQ==\",\n  \"Categories\": [\n      \"Cat1\",\n      \"Cat2\"\n  ],\n  \"Subject\": \"ACCEPTANCE TEST: I am the subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Retrieve list of journal entries after create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        minLength: 1,",
									"        maxLength: 1,",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$52\": { \"type\":\"string\" }, // Subject",
									"         \"$44\": { \"type\":\"string\", \"format\": \"date-time\" }, // Diary date",
									"        },",
									"        required: [\"@unid\", \"$52\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Retrieve a note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: I am the subject\");",
									"    pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Retrieve a note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    console.log(base64Body);",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: I am the subject\");",
									"    pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Update pimitem note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify unid\", function() {",
									"    pm.expect(pm.environment.get(\"ENTRY_ID\")).to.eql(jsonData[\"unid\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Body\": \"SSBhbSB0aGUgYm9keQ==\",\n  \"Categories\": [\n      \"Cat1\",\n      \"Cat2\",\n      \"updatepimitem\"\n  ],\n  \"Subject\": \"ACCEPTANCE TEST: I am the subject - updated pimitem\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Retrieve a pimitem note after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    console.log(base64Body);",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: I am the subject - updated pimitem\");",
									"    pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"updatepimitem\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Update a note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify unid\", function() {",
									"    pm.expect(pm.environment.get(\"ENTRY_ID\")).to.eql(jsonData[\"unid\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Body\": \"SSBhbSB0aGUgYm9keS4gVXBkYXRlZCE=\",\n  \"Categories\": [ \"Cat1\", \"Cat2\", \"Update\" ],\n  \"Subject\": \"ACCEPTANCE TEST: Updated subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Retrieve a note after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body. Updated!\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: Updated subject\");",
									"    pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"Update\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Retrieve a note after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body. Updated!\");",
									"",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: Updated subject\");",
									"    pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"Update\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Create another note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"SECOND_NOTE_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Body\": \"SSBhbSB0aGUgYm9keSBvZiB0aGUgMm5kIG5vdGUu\",\n  \"Categories\": [\n      \"Cat2-1\",\n      \"Cat2-2\"\n  ],\n  \"Subject\": \"ACCEPTANCE TEST: 2nd subject\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Retrieve list of journal entries after 2nd create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        minLength: 2,",
									"        maxLength: 2,",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$52\": { \"type\":\"string\" }, // Subject",
									"         \"$44\": { \"type\":\"string\", \"format\": \"date-time\" }, // Diary date",
									"        },",
									"        required: [\"@unid\", \"$52\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Notes Label/folder named Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Todos\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesJournal)\\\\Todos\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"TodosFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Create Notes Label/folder named Todos\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Todos\",\n    \"DesignType\": \"journal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for notes"
					},
					"response": []
				},
				{
					"name": "Create Notes Label/folder named Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\":  {",
									"         \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"View\": { \"type\":\"string\" },",
									"         \"DocumentCount\": { \"type\":\"number\" },",
									"         \"DisplayName\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify property and document count for newly created folder\", function () {",
									"    pm.expect(jsonData.DocumentCount).to.equal(0);",
									"    pm.expect(jsonData.DisplayName).to.equal(\"Done\");",
									"    pm.expect(jsonData.View).to.equal(\"(NotesJournal)\\\\Done\");",
									"",
									"    // collection variable to be used for 'Delete Label'",
									"    pm.environment.set(\"DoneFolderId\", jsonData.FolderId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Create Notes Label/folder named Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"DisplayName\" : \"Done\",\n    \"DesignType\": \"journal\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label"
							]
						},
						"description": "Use the /label Keep API to create a folder for notes"
					},
					"response": []
				},
				{
					"name": "Retrieve and verify new notes folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify Todos folder\", function () {",
									"    var todoFound = false;",
									"    var doneFound = false;",
									"    const todosId = pm.environment.get(\"TodosFolderId\");",
									"    const doneId = pm.environment.get(\"DoneFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === todosId) {",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for notes in Todos folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesJournal)\\\\Todos\", \"Wrong View for new notes folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Todos\", \"Wrong DisplayName for new notes folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new notes folder\");",
									"            pm.expect(folder.Type).to.equal(\"Journal\");",
									"            todoFound = true;",
									"        }",
									"",
									"        if (folder.FolderId === doneId) {",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for notes in Done folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesJournal)\\\\Done\", \"Wrong View for new notes folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Done\", \"Wrong DisplayName for new notes folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new notes folder\");",
									"            pm.expect(folder.Type).to.equal(\"Journal\");",
									"            doneFound = true;",
									"        }",
									"    });",
									"    pm.expect(todoFound).to.equal(true, \"Did not find Todos folder\");",
									"    pm.expect(doneFound).to.equal(true, \"Did not find Done folder\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve and verify new notes folders\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Due to /label/<labelId> not working, we will use /labels/all to retrieve all labels and search for the newly created contacts label in the returned list"
					},
					"response": []
				},
				{
					"name": "Add note to Todos folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var folderId = pm.environment.get(\"TodosFolderId\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Add Status\", function () {",
									"    pm.expect(jsonData[\"Add Status\"]).to.include(`Successful addition of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for addedIds\", function () {",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"message\"]).to.include(\"add successful\");",
									"    pm.expect(jsonData[\"addedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"ENTRY_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Add note to Todos folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\"{{ENTRY_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{TodosFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{TodosFolderId}}"
							]
						},
						"description": "Add a newly created note into a folder"
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Retrieve a note after add to Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body. Updated!\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: Updated subject\");",
									"    const folderId = pm.environment.get(\"TodosFolderId\");",
									"    pm.expect(jsonData).to.have.property(\"referenceFolder\").to.eql([folderId]);",
									"    ",
									"    // This check is failing due to LABS-924.  Uncomment this line once that bug is fixed",
									"    // pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"Update\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve note after add to Todos\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Move a note to Done folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Move Status\", function () {",
									"    pm.expect(jsonData[\"Move Status\"]).to.include(\"Successful move\");",
									"});",
									"",
									"pm.test(\"Check for movedIds\", function () {",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"message\"]).to.include(\"move successful\");",
									"    pm.expect(jsonData[\"movedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"ENTRY_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Move note to Done folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"move\": [\"{{ENTRY_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{DoneFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{DoneFolderId}}"
							]
						},
						"description": "Move a newly created note into a different folder"
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Retrieve a note after move to Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body. Updated!\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: Updated subject\");",
									"    const folderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData).to.have.property(\"referenceFolder\").to.eql([folderId]);",
									"    // This check is failing due to LABS-924.  Uncomment this line once that bug is fixed",
									"    // pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"Update\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve note after move to Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a note from Done folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Remove Status\", function () {",
									"    var folderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData[\"Remove Status\"]).to.include(`Successful removal of 1 documents to label ${folderId}`);",
									"});",
									"",
									"pm.test(\"Check for removedIds\", function () {",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"status\"]).to.eql(200);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.have.lengthOf(32);",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"message\"]).to.include(\"remove successful\");",
									"    pm.expect(jsonData[\"removedIds\"][\"0\"][\"unid\"]).to.eql(pm.environment.get(\"ENTRY_ID\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Remove note from Done folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\"{{ENTRY_ID}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/messages/{{DoneFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"messages",
								"{{DoneFolderId}}"
							]
						},
						"description": "Remvoe a newly created note from the Done folder"
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Retrieve a note after remove from Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"@created\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@lastmodified\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"         \"@unread\": { \"type\": \"boolean\" },",
									"         \"Subject\": { \"type\": \"string\" },",
									"         \"Body\": { \"type\": \"string\" },",
									"         \"Form\": { \"type\": \"string\" },",
									"         \"Categories\": { \"type\": \"array\" }",
									"    },",
									"    required: [\"@unid\", \"@created\", \"@lastmodified\", \"Subject\", \"Body\", \"@unread\", \"Form\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('Form').to.equal(\"JournalEntry\");",
									"    const base64Body = jsonData['Body'];",
									"    const words = CryptoJS.enc.Base64.parse(base64Body);",
									"    pm.expect(CryptoJS.enc.Utf8.stringify(words)).to.equal(\"I am the body. Updated!\");",
									"    pm.expect(jsonData).to.have.property('Subject').to.equal(\"ACCEPTANCE TEST: Updated subject\");",
									"    pm.expect(jsonData).to.not.have.property('$FolderRef');",
									"    ",
									"    // This check is failing due to LABS-924.  Uncomment this line once that bug is fixed",
									"    // pm.expect(jsonData).to.have.property('Categories').to.have.members([\"Cat1\", \"Cat2\", \"Update\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve note after remove from Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename Notes Todos Label/folder to Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    // pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Verify properties for newly created folder\", function () {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"TodosFolderId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"labelRenameTo\" : \"Items\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{TodosFolderId}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{TodosFolderId}}"
							]
						},
						"description": "Rename the Notes folder we just created"
					},
					"response": []
				},
				{
					"name": "Retrieve and verify renamed notes folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"FolderId\": { \"type\":\"string\", \"minLength\": 32 },",
									"            \"View\": { \"type\":\"string\" },",
									"            \"DocumentCount\": { \"type\":\"number\" },",
									"            \"DisplayName\": { \"type\":\"string\" },",
									"            \"Type\": { \"type\":\"string\" },",
									"            \"isFodler\": { \"type\":\"string\" }",
									"        },",
									"        required: [\"FolderId\", \"View\", \"DocumentCount\", \"DisplayName\", \"Type\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify Items folder\", function () {",
									"    var found = false;",
									"    const todosId = pm.environment.get(\"TodosFolderId\");",
									"    jsonData.forEach(folder => {",
									"        if (folder.FolderId === todosId) {",
									"            // Validate folder details for the newly created contacts folder",
									"            pm.expect(folder.DocumentCount).to.equal(0, \"Wrong count for notes in folder\");",
									"            pm.expect(folder.View).to.equal(\"(NotesJournal)\\\\Items\", \"Wrong View for new notes folder\");",
									"            pm.expect(folder.DisplayName).to.equal(\"Items\", \"Wrong DisplayName for new notes folder\");",
									"            pm.expect(folder.isFolder).to.equal(\"true\", \"Wrong isFolder value for new notes folder\");",
									"            pm.expect(folder.Type).to.equal(\"Journal\");",
									"            found = true;",
									"        }",
									"    });",
									"    pm.expect(found).to.equal(true, \"Did not find Items folder\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Retrieve and verify renamed notes folder\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/labels/all",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"labels",
								"all"
							]
						},
						"description": "Due to /label/<labelId> not working, we will use /labels/all to retrieve all labels and search for the newly renamed notes label in the returned list"
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Delete first note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with ENTRY_ID",
									"pm.environment.unset(\"ENTRY_ID\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook/{uuid} Delete second note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Done with SECOND_NOTE_ID",
									"pm.environment.unset(\"SECOND_NOTE_ID\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/notebook/{{SECOND_NOTE_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook",
								"{{SECOND_NOTE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notebook Retrieve list of journal entries after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minLength\": 0,",
									"    \"maxLength\": 0,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"$52\": { \"type\":\"string\" }, // Subject",
									"         \"$44\": { \"type\":\"string\", \"format\": \"date-time\" }, // Diary date",
									"        },",
									"        required: [\"@unid\", \"$52\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/notebook",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"notebook"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete notes folder Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"TodosFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"TodosFolderId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete notes folder Todos\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{TodosFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{TodosFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the notes folder we just created"
					},
					"response": []
				},
				{
					"name": "Delete label details - Delete notes folder Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Verify unid for deleted folder\", function () {",
									"    const jsonData = JSON.parse(responseBody);",
									"    const FolderId = pm.environment.get(\"DoneFolderId\");",
									"    pm.expect(jsonData).to.have.property('unid').to.equal(FolderId);",
									"});",
									"",
									"pm.environment.unset(\"DoneFolderId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Delete notes folder Done\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/label/{{DoneFolderId}}?documentdeletion=ALL",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"label",
								"{{DoneFolderId}}"
							],
							"query": [
								{
									"key": "documentdeletion",
									"value": "ALL"
								}
							]
						},
						"description": "Delete the notes folder we just created"
					},
					"response": []
				},
				{
					"name": "/trash Empty trash after delete notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash?documents=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							],
							"query": [
								{
									"key": "documents",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Contains test against the Keep Notebook API for APIs used by EWS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OOO",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/ooo Retrieve out of office settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    properties:{",
									"        \"StartDateTime\": { \"type\":\"string\", \"format\":\"date-time\" },",
									"        \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"        \"ExcludeInternet\": { \"type\":\"boolean\" },",
									"        \"Enabled\": { \"type\":\"boolean\" },",
									"        \"GeneralSubject\": { \"type\":\"string\" },",
									"        \"GeneralMessage\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"Enabled\", \"StartDateTime\", \"EndDateTime\", \"ExcludeInternet\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/ooo",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"ooo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/ooo Enable OOO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    properties:{",
									"        \"StartDateTime\": { \"type\":\"string\", \"format\":\"date-time\" },",
									"        \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"        \"ExcludeInternet\": { \"type\":\"boolean\" },",
									"        \"Enabled\": { \"type\":\"boolean\" },",
									"        \"GeneralSubject\": { \"type\":\"string\" },",
									"        \"GeneralMessage\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"Enabled\", \"StartDateTime\", \"EndDateTime\", \"ExcludeInternet\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    const adninName = pm.environment.get(\"AdminName\");",
									"",
									"    pm.expect(jsonData.Enabled).to.eql(true);",
									"    pm.expect(jsonData.ExcludeInternet).to.eql(true);",
									"    pm.expect(jsonData.GeneralSubject).to.eql(\"I am out of the office\");",
									"    pm.expect(jsonData.GeneralMessage).to.eql(`This is ${adninName}, I am out of the office and will not be checking email while I am out`);",
									"    pm.expect(new Date(jsonData.StartDateTime) - new Date(\"2022-09-03T12:00:00Z\")).to.eql(0);",
									"    pm.expect(new Date(jsonData.EndDateTime) - new Date(\"2022-09-09T09:00:00Z\")).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"StartDateTime\": \"2022-09-03T12:00:00Z\",\n\"EndDateTime\": \"2022-09-09T09:00:00Z\",\n\"ExcludeInternet\": true,\n\"Enabled\": true,\n\"SystemType\": null,\n\"SystemState\": true,\n\"GeneralSubject\": \"I am out of the office\",\n\"GeneralMessage\": \"This is {{AdminName}}, I am out of the office and will not be checking email while I am out\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/ooo",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"ooo"
							]
						}
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-179) /ooo Retrieve other user OOO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    properties:{",
									"        \"StartDateTime\": { \"type\":\"string\", \"format\":\"date-time\" },",
									"        \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"        \"ExcludeInternet\": { \"type\":\"boolean\" },",
									"        \"Enabled\": { \"type\":\"boolean\" },",
									"        \"GeneralSubject\": { \"type\":\"string\" },",
									"        \"GeneralMessage\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"Enabled\", \"StartDateTime\", \"EndDateTime\", \"ExcludeInternet\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify GeneralMessage\", function() {",
									"    const adninName = pm.environment.get(\"AdminName\");",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"    pm.expect(jsonData.GeneralMessage).not.to.equal(`This is ${adninName}, I am out of the office and will not be checking email while I am out`);",
									"    pm.expect(jsonData.GeneralMessage).not.to.equal(undefined);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has(\"OTHER_OOO_USER\")).to.equal(true, \"OTHER_OOO_USER is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/ooo?userid={{OTHER_OOO_USER}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"ooo"
							],
							"query": [
								{
									"key": "userid",
									"value": "{{OTHER_OOO_USER}}"
								}
							]
						},
						"description": "JSON object's \"GeneralMessage\" value is not undefined and it does not contain the current user (AdminName)"
					},
					"response": []
				},
				{
					"name": "/ooo Disable OOO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    properties:{",
									"        \"StartDateTime\": { \"type\":\"string\", \"format\":\"date-time\" },",
									"        \"EndDateTime\": { \"type\":\"string\", \"format\": \"date-time\" },",
									"        \"ExcludeInternet\": { \"type\":\"boolean\" },",
									"        \"Enabled\": { \"type\":\"boolean\" },",
									"        \"GeneralSubject\": { \"type\":\"string\" },",
									"        \"GeneralMessage\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"Enabled\", \"StartDateTime\", \"EndDateTime\", \"ExcludeInternet\"]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData.Enabled).to.eql(false);",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"StartDateTime\": \"2022-09-03T12:00:00Z\",\n\"EndDateTime\": \"2022-09-09T09:00:00Z\",\n\"ExcludeInternet\": true,\n\"Enabled\": false,\n\"SystemType\": null,\n\"SystemState\": false,\n\"GeneralSubject\": \"I am out of the office and ...\",\n\"GeneralMessage\": \"I am out of the office and will not be checking email while I am out\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/ooo",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"ooo"
							]
						}
					},
					"response": []
				}
			],
			"description": "Out of office APIs"
		},
		{
			"name": "jsCalendar",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('jsCalendar - User Login')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create an Appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"CAL_ID\", \"default\")",
									"console.log('Create an appointment')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"@type\": \"jsevent\", \n    \"title\": \"Dental Appt\",\n    \"privacy\": \"private\",\n    \"description\": \"Get those teeth cleaned\",\n    \"timeZone\": \"America/New_York\",\n    \"start\": \"2021-05-19T14:00:00\",\n    \"locations\": { \n        \"e55aa0ee-d1e5-42a4-b62b-e8bd2a3bc345\": { \n            \"relativeTo\": \"end\",\n            \"timeZone\": \"America/New_York\",\n            \"name\": \"Cary, NC\\nUnited States\"\n        }\n\n    }, \n    \"duration\": \"PT1H\", \n    \"AdditionalFields\": {\n        \"xHCL-extProp_0\": { \n            \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\",\n            \"PropertyName\": \"CalendarTimeZone\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						},
						"description": "Create an all-day event using the jsCalendar format.\n\nNote:  The following are not yet working:\n\n- Alarms - can set but can't verify\n- Locations - can set, but comes back as [ \"\" ]\n- start must be date only, no time"
					},
					"response": []
				},
				{
					"name": "/pimitem/{entryid} get appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('Get those teeth cleaned', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Dental Appt', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"e55aa0ee-d1e5-42a4-b62b-e8bd2a3bc345\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"private\", 'Unexpected privacy');",
									"    // For an all day event, the time will always come back as 04:00:00",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-05-19T14:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entry_id) Update the Appointmen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Update an appointment')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"title\": \"PATCH updated\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create an all-day event using the jsCalendar format.\n\nNote:  The following are not yet working:\n\n- Alarms - can set but can't verify\n- Locations - can set, but comes back as [ \"\" ]\n- start must be date only, no time"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2433) /pimitem/{entryid} get appointment after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('Get those teeth cleaned', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('PATCH updated', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"e55aa0ee-d1e5-42a4-b62b-e8bd2a3bc345\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"private\", 'Unexpected privacy');",
									"    // For an all day event, the time will always come back as 04:00:00",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-05-19T14:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{calentryid} Delete appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete appointment');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Delete the all day event we just created"
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create an All Day Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Create all day event')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"@type\": \"jsevent\",\n  \"title\": \"Acceptance Test All Day Event\",\n  \"start\": \"2021-07-16T07:00:00\",\n  \"duration\": \"P1D\",\n  \"privacy\": \"public\",\n  \"timeZone\": \"America/New_York\",\n  \"description\": \"This is created by Acceptance Tests.\",\n  \"locations\": {\n        \"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\": {\n          \"@type\": \"Location\",\n          \"name\": \"Math lab room 1\",\n          \"description\": \"Math Lab I, Department of Mathematics\"\n        }\n    },\n    \"Alert\": {    \n        \"@type\": \"Alert\",    \n        \"trigger\": {\n            \"@type\": \"OffsetTrigger\",   \n            \"offset\": \"PT15S\" \n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						},
						"description": "Create an all-day event using the jsCalendar format.\n\nNote:  The following are not yet working:\n\n- Alarms - can set but can't verify\n- Locations - can set, but comes back as [ \"\" ]\n- start must be date only, no time"
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Retrieve event after create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This is created by Acceptance Tests.', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Acceptance Test All Day Event', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"public\", 'Unexpected privacy');",
									"    // For an all day event, the time will always come back as 04:00:00",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-07-16T04:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Retrieve all day event after create');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Retrieve the all day event we just created and validate its content.\n\nNote:  This feature is not yet fully implemented.  We can only validate a few fields."
					},
					"response": []
				},
				{
					"name": "/pimitem/{entryid} update pimitem jsCalendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify the values\", function() {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData.unid).to.equal(pm.environment.get(\"ENTRY_ID\"), \"UNID is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"@type\": \"jsevent\",\n  \"title\": \"Acceptance Test All Day Event - updated pimitem\",\n  \"start\": \"2021-07-16T07:00:00\",\n  \"duration\": \"P1D\",\n  \"privacy\": \"public\",\n  \"timeZone\": \"America/New_York\",\n  \"description\": \"This is created by Acceptance Tests - updated pimitem\",\n  \"locations\": {\n        \"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\": {\n          \"@type\": \"Location\",\n          \"name\": \"Math lab room 1\",\n          \"description\": \"Math Lab I, Department of Mathematics\"\n        }\n    },\n    \"Alert\": {    \n        \"@type\": \"Alert\",    \n        \"trigger\": {\n            \"@type\": \"OffsetTrigger\",   \n            \"offset\": \"PT15S\" \n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{calid}/{entryid} Retrieve pimitem jsCalendar after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This is created by Acceptance Tests - updated pimitem', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Acceptance Test All Day Event - updated pimitem', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"public\", 'Unexpected privacy');",
									"    // For an all day event, the time will always come back as 04:00:00",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-07-16T04:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(FAILS: LABS-2433) calendar/cal_id/calentryid update calendar item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"         \"title\":{ \"type\":\"string\"},",
									"         \"description\":{ \"type\":\"string\"}",
									"    },",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify the values\", function() {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    console.log(\"This test needs to be completed when LABS-2433 is resolved\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"@type\": \"jsevent\",\n  \"title\": \"Acceptance Test All Day Event - patch updated\",\n  \"start\": \"2021-07-16T07:00:00\",\n  \"duration\": \"P1D\",\n  \"privacy\": \"public\",\n  \"timeZone\": \"America/New_York\",\n  \"description\": \"This is created by Acceptance Tests - patch updated\",\n  \"locations\": {\n        \"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\": {\n          \"@type\": \"Location\",\n          \"name\": \"Math lab room 1\",\n          \"description\": \"Math Lab I, Department of Mathematics\"\n        }\n    },\n    \"Alert\": {    \n        \"@type\": \"Alert\",    \n        \"trigger\": {\n            \"@type\": \"OffsetTrigger\",   \n            \"offset\": \"PT15S\" \n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(FAILS: LABS-2433) calendar/{calid}/{entryid} Retrieve jsCalendar after patch update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This is created by Acceptance Tests - patch updated', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Acceptance Test All Day Event - patch updated', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"public\", 'Unexpected privacy');",
									"",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-07-16T04:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "calendar/cal_id/calentryid update pimitem calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// {\"status\":\"OK\",\"statusCode\":200,\"message\":\"creation complete\",\"unid\":\"698A1A94297A39BF0025865D005A8679\"}",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" }",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify the values\", function() {",
									"    pm.expect(jsonData.statusText).to.equal(\"OK\");",
									"    pm.expect(jsonData.status).to.equal(200);",
									"    pm.expect(jsonData.message).to.equal(\"update complete\");",
									"    pm.expect(jsonData['unid']).to.equal(pm.environment.get(\"ENTRY_ID\"), \"UNID is not correct\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"@type\": \"jsevent\",\n  \"title\": \"Acceptance Test All Day Event - updated pimitem\",\n  \"start\": \"2021-07-16T07:00:00\",\n  \"duration\": \"P1D\",\n  \"privacy\": \"public\",\n  \"timeZone\": \"America/New_York\",\n  \"description\": \"This is created by Acceptance Tests - updated pimitem\",\n  \"locations\": {\n        \"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\": {\n          \"@type\": \"Location\",\n          \"name\": \"Math lab room 1\",\n          \"description\": \"Math Lab I, Department of Mathematics\"\n        }\n    },\n    \"Alert\": {    \n        \"@type\": \"Alert\",    \n        \"trigger\": {\n            \"@type\": \"OffsetTrigger\",   \n            \"offset\": \"PT15S\" \n        }\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "calendar/{calid}/{entryid} Retrieve jsCalendar after pimitem calendar update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This is created by Acceptance Tests - updated pimitem', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Acceptance Test All Day Event - updated pimitem', 'Unexpected title');",
									"    ",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    const locations = jsonData[\"locations\"];",
									"    pm.expect(Object.keys(locations)).to.be.eql([\"0dfb8ace-aad1-4734-b3b4-a2fe3d6ae1c5\"], 'Unexpected locations');",
									"    ",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal(\"public\", 'Unexpected privacy');",
									"",
									"    pm.expect(new Date(jsonData.start)).to.be.eql(new Date(\"2021-07-16T04:00:00\"), 'Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type prooperty');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{calentryid} Delete all day event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete all day event');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Delete the all day event we just created"
					},
					"response": []
				},
				{
					"name": "Get the admin email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AdminEmail\",jsonData[0][\"InternetAddress\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get the admin email address')"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/addresslookup?q={{AdminName}}&fulltext=false&all=false",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"addresslookup"
							],
							"query": [
								{
									"key": "q",
									"value": "{{AdminName}}"
								},
								{
									"key": "fulltext",
									"value": "false"
								},
								{
									"key": "all",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create a Meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('status').to.equal(200);",
									"    pm.expect(jsonData['message'].startsWith('creation complete')).to.be.true;",
									"    pm.expect(jsonData).to.have.property('statusText').to.equal(\"OK\");",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);",
									"pm.environment.unset(\"AdminEmail\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Create a meeting');",
									"pm.environment.set(\"participant_email\", \"ernie.valentino@quattro.rocks\");",
									"pm.environment.set(\"meeting_location_name\", \"Meeting room1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"@type\": \"jsevent\",\n   \"title\": \"Acceptance Test Meeting\",\n   \"start\": \"2021-07-16T04:00:00\",\n   \"duration\": \"PT1H30M\",\n   \"timeZone\": \"America/New_York\",\n   \"privacy\": \"public\",\n   \"description\": \"This is created by Acceptance Tests.\",\n   \"locations\": {\n      \"418d0b9b-b656-4b3c-909f-5b149ca779c9\": {\n          \"@type\": \"Location\",\n          \"name\": \"{{meeting_location_name}}\",\n          \"description\": \"Meeting Room-1B\"\n      }\n  },\n  \"participants\": {\n    \"524c8a9d-b824-2a3c-589f-5b149ca21119\": {\n          \"@type\": \"Participant\",\n          \"name\": \"Authenticated User\",\n          \"email\": \"{{AdminEmail}}\",\n          \"sendTo\": {\n              \"imip\": \"{{AdminEmail}}\"\n          },\n          \"kind\": \"individual\",\n          \"roles\": {\n              \"owner\": true,\n              \"attendee\": true,\n              \"chair\": true\n          }\n    },\n    \"524c8a9d-b824-2a3c-589f-5b149ca225d8\": {\n          \"@type\": \"Participant\",\n          \"name\": \"Ernie Valentino\",\n          \"email\": \"{{participant_email}}\",\n          \"sendTo\": {\n              \"imip\": \"{{participant_email}}\"\n          },\n          \"kind\": \"individual\",\n          \"roles\": {\n              \"optional\": false,\n              \"attendee\": true\n          }\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "/calendarresponse/{calid}/{calentryid} Update calendar invitation response Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.environment.unset('participant_id');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('status').to.equal(200);",
									"    pm.expect(jsonData['message'].startsWith('Responded successfully')).to.be.true;",
									"    pm.expect(jsonData).to.have.property('statusText').to.equal(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Update calendar invitation response');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participantAction\": \"declined\",\n    \"participantComment\": \"Commenting on response\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendarresponse/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendarresponse",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "/calendarresponse/{calid}/{calentryid} Get calendar invitation responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"console.log(jsonData);",
									"console.log(\"This test is not completed.  Waiting on Keep api support for GET /calendarresponse\");",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"minItems\": 1,",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"participants\": { ",
									"             \"type\":\"object\" ",
									"        }",
									"    },",
									"    // required: [\"unid\", \"parentunid\", \"Invitee\", \"status\", \"comment\"]",
									"    required: [\"participants\"]",
									"  }",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    const participants = jsonData.participants;",
									"    const pList = Object.values(participants);",
									"    let participationStatus = \"\";",
									"    for (const participant of pList) {",
									"        if (participant.email === pm.environment.get(\"participant_email\")) {",
									"            participationStatus = participant.participationStatus;",
									"            break;",
									"        }",
									"    }",
									"    // The participantStatus will not be declined since the admin set their own status and the admin/owner will always be accepted",
									"    // To test participantStatus we require 2 users and the second user needs to authenticate, be able to retrieve the calendar entry and",
									"    // POST a calendarresponse.",
									"    // pm.expect(participationStatus).to.equal(\\\"declined\\\");",
									"    pm.expect(participationStatus).to.not.be.undefined;",
									"    pm.environment.unset(\"participant_email\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Get calendar invitation responses');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/calendarresponse/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendarresponse",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Create a meeting with an invitee"
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Retrieve meeting after create ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This is created by Acceptance Tests.', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Declined: Acceptance Test Meeting', 'Unexpected title');",
									"",
									"    pm.expect(jsonData).to.have.property('locations');",
									"    // const locations = jsonData[\"locations\"];",
									"    const locations = Object.values(jsonData[\"locations\"]);",
									"",
									"    pm.expect(locations[0].name).to.be.eql(pm.environment.get(\"meeting_location_name\"), 'Unexpected locations');",
									"",
									"    pm.expect(jsonData).to.have.property('privacy').to.equal('public', 'Unexpected privacy');",
									"    pm.expect(jsonData.start).to.be.eql('2021-07-16T04:00:00','Unexpected start');",
									"    pm.expect(jsonData).to.have.property('timeZone').to.equal('America/New_York', 'Unexpected timeZone');",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type');",
									"    pm.environment.unset(\"meeting_location_name\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Retrieve meeting after create');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Retrieve the all day meeting we just created and validate its content.\n\nNote:  This feature is not yet fully implemented.  We can only validate a few fields."
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Delete meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.expect(jsonData).to.have.property(\"unid\").to.equal(pm.environment.get(\"ENTRY_ID\"), \"unid of returned item is not correct\");",
									"",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete meeting');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Delete the meeting we just created"
					},
					"response": []
				},
				{
					"name": "Create Appointment with additional properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('status').to.equal(200);",
									"    pm.expect(jsonData['message'].startsWith('creation complete')).to.be.true;",
									"    pm.expect(jsonData).to.have.property('statusText').to.equal(\"OK\");",
									"});",
									"",
									"// Set ENTRY_ID for Next test",
									"pm.environment.set(\"ENTRY_ID\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"@type\": \"jsevent\",\n\"title\": \"Test Appointment\",\n\"description\": \"This test appointment has a location, travel time, and an alert\",\n\"AdditionalFields\": {\n\"xHCL-com.domino.bodyType\": \"Text\",\n\"xHCL-extProp_0\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"ItemReminderAction\", \"PropertyType\": \"String\", \"Value\": \"Audio\" }\n\n,\n\"xHCL-extProp_1\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"ItemReminderSound\", \"PropertyType\": \"String\", \"Value\": \"Chord\" }\n\n,\n\"xHCL-extProp_2\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"CalendarTimeZone\", \"PropertyType\": \"String\", \"Value\": \"America/New_York\" }\n\n,\n\"xHCL-extProp_3\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"TravelTime\", \"PropertyType\": \"String\", \"Value\": \"1620.000000\" }\n\n,\n\"xHCL-extProp_4\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"StartLocation\", \"PropertyType\": \"String\", \"Value\": \"YnBsaXN0MDDUAQIDBAUGIyRYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKQHCBscVSRudWxs2QkKCwwNDg8QERITExMTExgZGlZyYWRpdXNbZGlzcGxheU5hbWVXYWRkcmVzc1xtYXBLaXRIYW5kbGVbYWJVUkxTdHJpbmdVdGl0bGVWJGNsYXNzVHR5cGVZcm91dGVUeXBlIwAAAAAAAAAAgACAAIAAgACAAIADEACAAlNDQVLSHR4fIFokY2xhc3NuYW1lWCRjbGFzc2VzW0NhbExvY2F0aW9uoiEiW0NhbExvY2F0aW9uWE5TT2JqZWN0XxAPTlNLZXllZEFyY2hpdmVy0SUmVHJvb3SAAQAIABEAGgAjAC0AMgA3ADwAQgBVAFwAaABwAH0AiQCPAJYAmwClAK4AsACyALQAtgC4ALoAvAC+AMIAxwDSANsA5wDqAPYA/wERARQBGQAAAAAAAAIBAAAAAAAAACcAAAAAAAAAAAAAAAAAAAEb\" }\n\n,\n\"xHCL-extProp_5\":\n\n{ \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\", \"PropertyName\": \"StructuredLocation\", \"PropertyType\": \"String\", \"Value\": \"YnBsaXN0MDDUAQIDBAUGKSpYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKQHCCEiVSRudWxs3AkKCwwNDg8QERITFBUWFRgZGhscFR4VFVthYlVSTFN0cmluZ1ZyYWRpdXNZcm91dGVUeXBlWWxvbmdpdHVkZVhsYXRpdHVkZVR0eXBlVXRpdGxlViRjbGFzc1dhZGRyZXNzXxAQaGFzVmFsaWRMb2NhdGlvblxtYXBLaXRIYW5kbGVbZGlzcGxheU5hbWWAACNAaCEZEbIRtYAAI8BTstQXQ+lkI0BB3PVVghKUEACAAoADgAAJgACAAF8QLDIwMCBSZWdlbmN5IFdvb2RzIFBsCkNhcnksIE5DLCBVbml0ZWQgU3RhdGVz0iMkJSZaJGNsYXNzbmFtZVgkY2xhc3Nlc1tDYWxMb2NhdGlvbqInKFtDYWxMb2NhdGlvblhOU09iamVjdF8QD05TS2V5ZWRBcmNoaXZlctErLFRyb290gAEACAARABoAIwAtADIANwA8AEIAWwBnAG4AeACCAIsAkACWAJ0ApQC4AMUA0QDTANwA3gDnAPAA8gD0APYA+AD5APsA/QEsATEBPAFFAVEBVAFgAWkBewF+AYMAAAAAAAACAQAAAAAAAAAtAAAAAAAAAAAAAAAAAAABhQ==\" }\n\n,\n\"xHCL-calendar:UID\": \"A2AC73BD-7AE1-4F71-B1D3-C3F4623585BB\",\n\"xHCL-calendar:MeetingTimeZone\": \"Eastern Standard Time\"\n},\n\"timeZone\": \"America/New_York\",\n\"start\": \"2020-09-16T16:45:00.000\",\n\"duration\": \"PT1H\",\n\"locations\": {\n\"b3fbfaf8-10ad-4965-b05e-7e44e658ae2a\":\n\n{ \"@type\": \"Location\", \"name\": \"200 Regency Woods Pl\\nCary, NC, United States\" }\n\n},\n\"alerts\": {\n\"88aa7b3d-4707-4792-95d4-6da057be2243\": {\n\"@type\": \"Alert\",\n\"trigger\":\n\n{ \"@type\": \"OffsetTrigger\", \"offset\": \"-PT5M\" }\n\n}\n}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calandar/{calid}/{entryid} Retrieve meeting after create  Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"timeZone\": { \"type\":\"string\" },",
									"         \"start\": { \"type\":\"string\" },",
									"         \"title\": { \"type\":\"string\" },",
									"         \"description\": { \"type\":\"string\" },",
									"         \"locations\": { \"type\":\"object\" },",
									"         \"privacy\": { \"type\":\"string\" },",
									"         \"AdditionalProperties\": { \"type\": \"object\"},",
									"         \"@type\": { \"type\":\"string\" }",
									"    },",
									"    required: [ \"timeZone\", \"start\", \"title\", \"description\", \"locations\", \"privacy\", \"@type\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData).to.have.property('description').to.equal('This test appointment has a location, travel time, and an alert', 'Unexpected description');",
									"    pm.expect(jsonData).to.have.property('title').to.equal('Test Appointment');",
									"",
									"    pm.expect(jsonData).to.have.property('AdditionalFields');",
									"    const additionalProps = jsonData[\"AdditionalFields\"];",
									"",
									"    pm.expect(additionalProps[\"xHCL-com.domino.bodyType\"]).to.be.eql(\"Text\");",
									"",
									"    pm.expect(jsonData).to.have.property('@type').to.equal('jsevent', 'Unexpected @type');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Retrieve meeting after create');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Retrieve the all day meeting we just created and validate its content.\n\nNote:  This feature is not yet fully implemented.  We can only validate a few fields."
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Delete appointment with additional props",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.expect(jsonData).to.have.property(\"unid\").to.equal(pm.environment.get(\"ENTRY_ID\"), \"unid of returned item is not correct\");",
									"",
									"pm.environment.unset(\"ENTRY_ID\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete appointment with additional props');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID')).to.equal(true, \"ENTRY_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID}}"
							]
						},
						"description": "Delete the meeting we just created"
					},
					"response": []
				},
				{
					"name": "/calendar/{calid} Create an entry to contain an attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"status\": { \"type\":\"number\" },",
									"         \"statusText\": { \"type\":\"string\" },",
									"         \"message\": { \"type\":\"string\" },",
									"    },",
									"    required: [\"unid\", \"status\", \"statusText\", \"message\"]",
									"};",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Set ENTRY_ID_A for Next test",
									"pm.environment.set(\"ENTRY_ID_A\",jsonData[\"unid\"]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"CAL_ID\",\"default\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"@type\": \"jsevent\", \n    \"title\": \"Dental Appt\",\n    \"privacy\": \"private\",\n    \"description\": \"Get those teeth cleaned\",\n    \"timeZone\": \"America/New_York\",\n    \"start\": \"2021-05-19T14:00:00\",\n    \"locations\": { \n        \"e55aa0ee-d1e5-42a4-b62b-e8bd2a3bc345\": { \n            \"relativeTo\": \"end\",\n            \"timeZone\": \"America/New_York\",\n            \"name\": \"Cary, NC\\nUnited States\"\n        }\n\n    }, \n    \"duration\": \"PT1H\", \n    \"AdditionalFields\": {\n        \"xHCL-extProp_0\": { \n            \"PropertySetId\": \"A7B529B5-4B75-47A7-A24F-20743D6C55CD\",\n            \"PropertyName\": \"CalendarTimeZone\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/attachments/{entryid} Add an attachment to the entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"const fileName = jsonData.filename;",
									"",
									"pm.environment.set(\"FILE_NAME\", fileName)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "attach.txt"
								}
							]
						},
						"url": {
							"raw": "{{PIMHOST}}/attachments/{{ENTRY_ID_A}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"attachments",
								"{{ENTRY_ID_A}}"
							]
						},
						"description": "Copy the attach.txt file from openclient-keepcomponent/test to your /Postman/files directory"
					},
					"response": []
				},
				{
					"name": "/attachments/{entryid}/{filename} Retrieve attachment from calendar entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify value\", function() {",
									"    pm.expect(responseBody).to.equal('This is a test attachment file\\n');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.expect(pm.environment.has(\"FILE_NAME\")).to.equal(true, \"FILE_NAME is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/attachments/{{ENTRY_ID_A}}/{{FILE_NAME}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"attachments",
								"{{ENTRY_ID_A}}",
								"{{FILE_NAME}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/calendar/{calid}/{entryid} Delete entry with attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"pm.expect(jsonData).to.have.property(\"unid\").to.equal(pm.environment.get(\"ENTRY_ID_A\"), \"unid of returned item is not correct\");",
									"",
									"pm.environment.unset(\"ENTRY_ID_A\");",
									"pm.environment.unset(\"FILE_NAME\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Delete appointment with additional props');",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('CAL_ID')).to.equal(true, \"CAL_ID is not set\");",
									"pm.expect(pm.environment.has('ENTRY_ID_A')).to.equal(true, \"ENTRY_ID_A is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/calendar/{{CAL_ID}}/{{ENTRY_ID_A}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"calendar",
								"{{CAL_ID}}",
								"{{ENTRY_ID_A}}"
							]
						},
						"description": "Delete the meeting we just created"
					},
					"response": []
				}
			],
			"description": "Calendar tests to work with the new jsCalendar format Keep API\n\nWhat to test:\n\n- Create an all day event and verify the operation succeeds\n- Get the item to verify it exists and validate any fields that are returned.  This test will grow as the Keep team builds out the GET functionality\n- Update using jsCalendar not there yet\n- Delete the event\n\n- Create a meeting with attendees\n- Same as above\n\n\n- Same tests with Anniversary?\n- Same tests with Reminder?\n\n- How do we test accepting/rejecting an invitation?\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log('Start jsCalendar test collection');",
							"",
							"// Set up environment variables to be used in the entire collection",
							"pm.environment.set(\"CAL_ID\",\"default\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Clear environment variables used by the entire collection",
							"pm.environment.unset(\"CAL_ID\");"
						]
					}
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"    pm.environment.set(\"AUTH_SUBJECT\", jsonData.claims.sub);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for messageA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"count\": { \"type\":\"number\" },",
									"        \"result\": { \"type\":\"array\" },",
									"    },",
									"    required: [\"count\", \"result\"]",
									"};",
									"         ",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Verifying result has 1 entry",
									"pm.test(\"Verify results\", function(){",
									"   pm.expect(jsonData.result.length).to.equal(1); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"DQL\",\n    \"query\": \"Subject contains ('Keep Acceptance Test messageA')\",\n    \"viewRefresh\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/search",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"search"
							]
						},
						"description": "Create an all-day event using the jsCalendar format.\n\nNote:  The following are not yet working:\n\n- Alarms - can set but can't verify\n- Locations - can set, but comes back as [ \"\" ]\n- start must be date only, no time"
					},
					"response": []
				},
				{
					"name": "Full Text Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"count\": { \"type\":\"number\" },",
									"        \"result\": { \"type\":\"array\" },",
									"    },",
									"    required: [\"count\", \"result\"]",
									"};",
									"",
									"//Verifying result has 1 entry",
									"pm.test(\"Verify results\", function(){",
									"   pm.expect(jsonData.result.length).to.equal(1); ",
									"});",
									"         ",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"type\": \"FT\", \n    \"query\": \"FindMe246\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/search",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"search"
							]
						},
						"description": "Create an all-day event using the jsCalendar format.\n\nNote:  The following are not yet working:\n\n- Alarms - can set but can't verify\n- Locations - can set, but comes back as [ \"\" ]\n- start must be date only, no time"
					},
					"response": []
				},
				{
					"name": "Delete search messageA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestSearchMessageId\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('TestSearchMessageId')).to.equal(true, \"TestSearchMessageId is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestSearchMessageId}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestSearchMessageId}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Delete search messageB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Check status 200\", function () {",
									"    pm.expect(jsonData.status).to.equal(200);",
									"});",
									"",
									"pm.environment.unset(\"TestSearchMessageId2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)",
									"",
									"// Verify required environment variables",
									"pm.expect(pm.environment.has('TestSearchMessageId2')).to.equal(true, \"TestSearchMessageId2 is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/message/{{TestSearchMessageId2}}/mime",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"message",
								"{{TestSearchMessageId2}}",
								"mime"
							]
						},
						"description": "Delete a message by id"
					},
					"response": []
				},
				{
					"name": "Hard delete for search messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/trash",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"trash"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rules",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n \"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rules Create rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture rule unid\", function () {",
									"    pm.environment.set(\"RULE_ID\",jsonData['unid']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n            \"ActionList\": [\n              \"move to folder ($JunkMail)\"\n            ],\n            \"ConditionList\": [\n              \"Sender contains @junk\"\n            ],\n            \"Enable\": \"1\",\n            \"TokActionList\": [\n              \"1¦1¦($JunkMail)\"\n            ],\n            \"tokConditionList\": [\n              \"1¦1¦@junk¦0\"\n            ]\n          \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/rule",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rules Create second rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Capture rule unid\", function () {",
									"    pm.environment.set(\"RULE_ID2\",jsonData['unid']);",
									"});",
									"console.log(`RULE_ID2 === ${pm.environment.get(\"RULE_ID2\")}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n            \"ActionList\": [\n              \"move to folder ($inbox)\"\n            ],\n            \"ConditionList\": [\n              \"Sender contains @junk\"\n            ],\n            \"Enable\": \"1\",\n            \"TokActionList\": [\n              \"1¦1¦($inbox)\"\n            ],\n            \"tokConditionList\": [\n              \"1¦1¦@junk¦0\"\n            ]\n          \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/rule",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rules Retrieve list of rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 2,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"        \"$108\": { \"type\":\"string\" },",
									"        \"$111\": { \"type\":\"string\" },",
									"        \"$110\": { \"type\":\"string\" },",
									"        \"$112\": { \"type\":\"string\" },",
									"        },",
									"        required: [\"@unid\", \"$108\", \"$111\", \"$110\", \"$112\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/rules",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rules Retrieve list of rules in document format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 2,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32},",
									"         \"ActionList\": { \"type\":\"array\", \"minLength\": 32 },",
									"         \"ConditionList\": { \"type\":\"array\", \"minLength\": 32},",
									"         \"Enable\": { \"type\":\"string\" },",
									"         \"Importance\": { \"type\":\"string\" },",
									"         \"TokActionList\": { \"type\":\"array\" },",
									"         \"tokConditionList\": { \"type\":\"array\" },",
									"        },",
									"        required: [\"@unid\", \"ActionList\", \"ConditionList\", \"Enable\", \"Importance\", \"TokActionList\", \"tokConditionList\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/rules/?documents=true",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rules",
								""
							],
							"query": [
								{
									"key": "documents",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/rule/{uuid} Retrieve rule 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"@unid\": { \"type\":\"string\", \"minLength\": 32},",
									"         \"ActionList\": { \"type\":\"array\", \"minLength\": 32 },",
									"         \"ConditionList\": { \"type\":\"array\", \"minLength\": 32},",
									"         \"Enable\": { \"type\":\"string\" },",
									"         \"Importance\": { \"type\":\"string\" },",
									"         \"TokActionList\": { \"type\":\"array\" },",
									"         \"tokConditionList\": { \"type\":\"array\" },",
									"    },",
									"    required: [\"@unid\", \"ActionList\", \"ConditionList\", \"Enable\", \"Importance\", \"TokActionList\", \"tokConditionList\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"RULE_ID\"), \"unid is not correct\");",
									"    pm.expect(jsonData.ActionList).to.deep.equal(['move to folder ($JunkMail)']);",
									"    pm.expect(jsonData.ConditionList).to.deep.equal(['Sender contains @junk']);",
									"    pm.expect(jsonData.Enable).to.equal(\"1\", \"Enable is not correct\");",
									"    pm.expect(jsonData.Importance).to.equal(\"1\", \"Importance is not correct\");",
									"    pm.expect(jsonData.TokActionList).to.deep.equal(['1¦1¦($junkmail)']);",
									"    pm.expect(jsonData.tokConditionList).to.deep.equal(['1¦1¦@junk¦0']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)",
									"pm.expect(pm.environment.has('RULE_ID')).to.equal(true, \"RULE_ID is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/rule/{{RULE_ID}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule",
								"{{RULE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/pimitem/{uuid} Retrieve rule 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32},",
									"        \"ActionList\": { \"type\":\"array\", \"minLength\": 32 },",
									"        \"ConditionList\": { \"type\":\"array\", \"minLength\": 32},",
									"        \"Enable\": { \"type\":\"string\" },",
									"        \"Importance\": { \"type\":\"string\" },",
									"        \"TokActionList\": { \"type\":\"array\" },",
									"        \"tokConditionList\": { \"type\":\"array\" },",
									"    },",
									"    ",
									"    required: [\"@unid\", \"ActionList\", \"ConditionList\", \"Enable\", \"Importance\", \"TokActionList\", \"tokConditionList\"]",
									"",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"RULE_ID2\"), \"unid is not correct\");",
									"    pm.expect(jsonData.ActionList).to.deep.equal(['move to folder ($inbox)']);",
									"    pm.expect(jsonData.ConditionList).to.deep.equal([\"Sender contains @junk\"]);",
									"    pm.expect(jsonData.Enable).to.equal(\"1\", \"Enable is not correct\");",
									"    pm.expect(jsonData.Importance).to.equal(\"1\", \"Importance is not correct\");",
									"    pm.expect(jsonData.TokActionList).to.deep.equal(['1¦1¦($inbox)']);",
									"    pm.expect(jsonData.tokConditionList).to.deep.equal(['1¦1¦@junk¦0']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)",
									"pm.expect(pm.environment.has('RULE_ID2')).to.equal(true, \"RULE_ID2 is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/pimitem/{{RULE_ID2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"pimitem",
								"{{RULE_ID2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rule/{uuid} Update a rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32},",
									"        \"ActionList\": { \"type\":\"array\", \"minLength\": 32 },",
									"        \"ConditionList\": { \"type\":\"array\", \"minLength\": 32},",
									"        \"Importance\": { \"type\":\"string\" },",
									"        \"tokActionList\": { \"type\":\"array\" },",
									"        \"tokConditionList\": { \"type\":\"array\" },",
									"    },",
									"    required: [\"@unid\", \"ActionList\", \"ConditionList\", \"Importance\", \"tokActionList\", \"tokConditionList\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    pm.expect(jsonData[\"@unid\"]).to.equal(pm.environment.get(\"RULE_ID2\"), \"unid is not correct\");",
									"    pm.expect(jsonData.ActionList).to.deep.equal([\"move to folder ($inbox)\"]);",
									"    pm.expect(jsonData.ConditionList).to.deep.equal([\"Sender contains @test\"]);",
									"    pm.expect(jsonData.Importance).to.equal(\"1\", \"Importance is not correct\");",
									"    pm.expect(jsonData.tokActionList).to.deep.equal(['1¦1¦($inbox)']);",
									"    pm.expect(jsonData.tokConditionList).to.deep.equal(['1¦1¦@test¦0']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)",
									"pm.expect(pm.environment.has('RULE_ID2')).to.equal(true, \"RULE_ID2 is not set\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n            \"ActionList\": [\r\n              \"move to folder ($inbox)\"\r\n            ],\r\n            \"ConditionList\": [\r\n              \"Sender contains @test\"\r\n            ],\r\n            \"Enable\": \"1\",\r\n            \"tokActionList\": [\r\n              \"1¦1¦($inbox)\"\r\n            ],\r\n            \"tokConditionList\": [\r\n              \"1¦1¦@test¦0\"\r\n            ]\r\n          \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/rule/{{RULE_ID2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule",
								"{{RULE_ID2}}"
							]
						},
						"description": "Update the rule that already exists"
					},
					"response": []
				},
				{
					"name": "/rule/{uuid} Delete rule 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/rule/{{RULE_ID2}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule",
								"{{RULE_ID2}}"
							]
						},
						"description": "Delete rule that was created"
					},
					"response": []
				},
				{
					"name": "/rules Retrieve list of rules entries after delete rule 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 1,",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"        \"@unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"        \"$111\": { \"type\":\"string\" },",
									"        \"$110\": { \"type\":\"string\" },",
									"        \"$112\": { \"type\":\"string\" },",
									"        },",
									"       ",
									"        required: [\"@unid\", \"$111\", \"$110\", \"$112\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Verify values\", function() {",
									"    let found = false;",
									"    for(var rule of jsonData){",
									"        found = found || (rule[\"@unid\"] === pm.environment.get(\"RULE_ID2\"));",
									"    }",
									"    pm.expect(found).to.be.false;",
									"    console.log(jsonData[0][\"@unid\"]);",
									"});",
									"",
									"pm.environment.unset(\"RULE_ID2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/rules",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rules"
							]
						},
						"description": "Retrieve the list of rule entries after deleting"
					},
					"response": []
				},
				{
					"name": "/rules Add another rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 },",
									"         \"statusText\": { \"type\": \"string\" },",
									"         \"status\": { \"type\": \"number\" },",
									"         \"message\": { \"type\": \"string\" }",
									"    },",
									"    required: [\"unid\"]",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n            \"ActionList\": [\n              \" move to folder ($Inbox)\"\n            ],\n            \"ConditionList\": [\n              \"   Sender contains @junk\"\n            ],\n            \"Enable\": \"1\",\n            \"TokActionList\": [\n              \"1¦1¦($Inbox)\"\n            ],\n            \"tokConditionList\": [\n              \"1¦1¦@junk¦0\"\n            ]\n          \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/rule",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rule"
							]
						}
					},
					"response": []
				},
				{
					"name": "/rule/{uuid} Delete all rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"         \"unid\": { \"type\":\"string\", \"minLength\": 32 }",
									"    },",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.environment.unset(\"RULE_ID\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/rules",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rules"
							]
						},
						"description": "Delete rule that was created"
					},
					"response": []
				},
				{
					"name": "/rules Retrieve list of rules entries after delete all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"minItems\": 0",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestName)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"url": {
							"raw": "{{PIMHOST}}/rules",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"rules"
							]
						},
						"description": "Retrieve the list of rule entries after deleting"
					},
					"response": []
				}
			],
			"description": "Contains acceptance test for Rules",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delegate",
			"item": [
				{
					"name": "User Login - Get JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Capture Bearer\", function () {",
									"    pm.response.to.be.json;",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"AUTH_KEY\",jsonData.bearer);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"password\" : \"{{AdminPassword}}\",\t\n\"username\" : \"{{AdminName}}\"\n}"
						},
						"url": {
							"raw": "{{HOST}}/auth",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/delegation Create delegation information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"statusText\": \"string\",",
									"    \"status\": \"number\",",
									"    \"message\": \"string\"",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Set delegation name to process",
									"pm.environment.set(\"delegationName\", \"CN=John Doe/O=Mauradors\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"calendar\": [\n    \"CREATE\",\n    \"DELETE\",\n    \"READ\",\n    \"UPDATE\"\n  ],\n  \"contacts\": [\n    \"CREATE\",\n    \"DELETE\",\n    \"READ\",\n    \"UPDATE\"\n  ],\n  \"mail\": [\n    \"CREATE\",\n    \"DELETE\",\n    \"READ\",\n    \"UPDATE\"\n  ],\n  \"name\": \"{{delegationName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/delegation",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"delegation"
							]
						}
					},
					"response": []
				},
				{
					"name": "/delegation Update delegation information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"statusText\": \"string\",",
									"    \"status\": \"number\",",
									"    \"message\": \"string\"",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Set patch delegation name to process",
									"pm.environment.set(\"delegationPatchName\", \"CN=John Doe/O=Patch\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"add\": [\n    {\n      \"calendar\": [\n        \"CREATE\",\n        \"DELETE\",\n        \"READ\",\n        \"UPDATE\"\n      ],\n      \"contacts\": [\n        \"CREATE\",\n        \"DELETE\",\n        \"READ\",\n        \"UPDATE\"\n      ],\n      \"mail\": [\n        \"CREATE\",\n        \"DELETE\",\n        \"READ\",\n        \"UPDATE\"\n      ],\n      \"name\": \"{{delegationPatchName}}\"\n    }\n  ],\n  \"remove\": [\n    \"{{delegationName}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PIMHOST}}/delegation",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"delegation"
							]
						},
						"description": "Update delegation information"
					},
					"response": []
				},
				{
					"name": "FAILS (LABS-2871) /delegation Get list of delegation information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": [{",
									"        type: \"object\",",
									"        properties:{",
									"            \"name\": { \"type\":\"string\" },",
									"            \"mail\": { ",
									"                \"type\":\"array\",",
									"                \"minLength\": 32",
									"            },",
									"            \"contacts\": { ",
									"                \"type\":\"array\",",
									"                \"minLength\": 32",
									"            },",
									"            \"calendar\": { ",
									"                \"type\":\"array\",",
									"                \"minLength\": 32",
									"            },",
									"            // \"todo\": { ",
									"            //     \"type\":\"array\",",
									"            //     \"minLength\": 32",
									"            // },",
									"        },",
									"        required: [\"name\", \"contacts\", \"calendar\"]",
									"    }]",
									"};",
									"",
									"pm.test(\"Verify body schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Check name is valid email\", function () {",
									"    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;",
									"",
									"    jsonData.forEach(delegate => pm.expect(delegate.name).to.match(re));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/delegation",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"delegation"
							]
						}
					},
					"response": []
				},
				{
					"name": "/delegation Delete delegation information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"const schema = {",
									"    \"statusText\": \"string\",",
									"    \"status\": \"number\",",
									"    \"message\": \"string\"",
									"};",
									"",
									"pm.test(\"Verify response schema\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"",
									"    pm.environment.unset(\"delegationPatchName\");",
									"    pm.environment.unset(\"delegationName\");",
									"    pm.environment.unset(\"AUTH_KEY\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{AUTH_KEY}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PIMHOST}}/delegation?delegate={{delegationPatchName}}",
							"host": [
								"{{PIMHOST}}"
							],
							"path": [
								"delegation"
							],
							"query": [
								{
									"key": "delegate",
									"value": "{{delegationPatchName}}"
								}
							]
						},
						"description": "Delete delegation information"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"setTimeout(function(){}, 5) // Pause between each API request ",
					"",
					"var folderUnids = [\"BB6A82C56CE4E811852576C600602AF9\",",
					"            \"38D46BF5E8F08834852564B500129B2C\",",
					"            \"AF10093768DDE30285256D0A006EEF2C\",",
					"            \"75A2B4E4071787C8852576C600602AFA\",",
					"            \"35E60C0DAC14F2A5852566F0006E31B1\"];",
					"",
					"var folderNames = [\"Drafts\",",
					"            \"Inbox\",",
					"            \"JunkMail\",",
					"            \"Sent\",",
					"            \"Trash\"];",
					"",
					"utils = {",
					"  getFolderNameById: function(id) {",
					"      for(let i = 0; i < folderUnids.length; i++){",
					"          if(folderUnids[i] === id) return folderNames[i];",
					"      }",
					"  },",
					"  getFolderIdByName: function(name) {",
					"      for(let i = 0; i < folderNames.length; i++){",
					"          if(folderNames[i] === name) return folderUnids[i];",
					"      }",
					"  }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}